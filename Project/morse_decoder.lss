
morse_decoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  0000055a  000005ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000055a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001277  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a94  00000000  00000000  000019a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000830  00000000  00000000  0000243b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000244  00000000  00000000  00002c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000540  00000000  00000000  00002eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b3c  00000000  00000000  000033f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003f2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3c       	cpi	r26, 0xC6	; 198
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 1e 02 	call	0x43c	; 0x43c <main>
  8e:	0c 94 ab 02 	jmp	0x556	; 0x556 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <usart_init>:
{

    /*
    Enabling the Transmitter
    */
    UCSR0B |= (1 << TXEN0); // Enable transmitter
  96:	a1 ec       	ldi	r26, 0xC1	; 193
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	8c 91       	ld	r24, X
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	8c 93       	st	X, r24

    /*
    Enabling the Receiver
    */
    UCSR0B |= (1 << RXEN0); // Enable receiver
  a0:	8c 91       	ld	r24, X
  a2:	80 61       	ori	r24, 0x10	; 16
  a4:	8c 93       	st	X, r24

    /*
    Setting the Baud Rate
    */
    UBRR0L = (uint8_t)(UBRR); // Load lower 8 bits of UBRR
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UBRR0H = (uint8_t)(UBRR >> 8); // Load upper 4 bits of UBRR
  ac:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    // It is alright to do this as last 4 bits of UBRR0H are reserved

    /*
    Setting to Asynchronous Mode
    */
    UCSR0C &= ~(1<<UMSEL01);
  b0:	e2 ec       	ldi	r30, 0xC2	; 194
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8f 77       	andi	r24, 0x7F	; 127
  b8:	80 83       	st	Z, r24
    UCSR0C &= ~(1<<UMSEL00);
  ba:	80 81       	ld	r24, Z
  bc:	8f 7b       	andi	r24, 0xBF	; 191
  be:	80 83       	st	Z, r24

    /*
    Setting 8-bit data mode
    */
    UCSR0B &= ~(1 << UCSZ02); // Clear UCSZ02
  c0:	8c 91       	ld	r24, X
  c2:	8b 7f       	andi	r24, 0xFB	; 251
  c4:	8c 93       	st	X, r24
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // Set UCSZ01 and UCSZ00
  c6:	80 81       	ld	r24, Z
  c8:	86 60       	ori	r24, 0x06	; 6
  ca:	80 83       	st	Z, r24

    /*
    Setting the Parity Mode   
    */
    
    UCSR0C &= ~(1<<UPM00);
  cc:	80 81       	ld	r24, Z
  ce:	8f 7e       	andi	r24, 0xEF	; 239
  d0:	80 83       	st	Z, r24
    UCSR0C &= ~(1<<UPM01);
  d2:	80 81       	ld	r24, Z
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	80 83       	st	Z, r24

    /*    Setting the Stop Bit
    */
    UCSR0C &= ~(1 << USBS0); 
  d8:	80 81       	ld	r24, Z
  da:	87 7f       	andi	r24, 0xF7	; 247
  dc:	80 83       	st	Z, r24

}
  de:	08 95       	ret

000000e0 <usart_send>:

void usart_send(char send_char)
{
    // We can wait until the transmit buffer is empty
    // i.e. it waits as long as the UDRE0 bit is not set (0)
    while (!(UCSR0A & (1 << UDRE0)));
  e0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e4:	95 ff       	sbrs	r25, 5
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <usart_send>

    // Load the character into the transmit buffer
    UDR0 = send_char;   
  e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  ec:	08 95       	ret

000000ee <usart_receive>:

char usart_receive(void)
{
    // Wait until a character is received
    while (!(UCSR0A & (1 << RXC0)));
  ee:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f2:	87 ff       	sbrs	r24, 7
  f4:	fc cf       	rjmp	.-8      	; 0xee <usart_receive>

    // Return the received character from the data register
    return UDR0;
  f6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  fa:	08 95       	ret

000000fc <usart_send_string>:


void usart_send_string(char* str)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	ec 01       	movw	r28, r24
    while (*str != '\0')
 102:	89 91       	ld	r24, Y+
 104:	81 11       	cpse	r24, r1
 106:	03 c0       	rjmp	.+6      	; 0x10e <usart_send_string+0x12>
    {
        usart_send(*str);
        str++;
    }
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

void usart_send_string(char* str)
{
    while (*str != '\0')
    {
        usart_send(*str);
 10e:	0e 94 70 00 	call	0xe0	; 0xe0 <usart_send>
 112:	f7 cf       	rjmp	.-18     	; 0x102 <usart_send_string+0x6>

00000114 <delay_timer>:

// 100ms delay using Timer1 in CTC mode, prescaler 64
void delay_timer()
{
    // Set Timer1 to CTC mode (Clear Timer on Compare Match)
    TCCR1A = 0x00;
 114:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = (1 << WGM12); // CTC mode
 118:	88 e0       	ldi	r24, 0x08	; 8
 11a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

    // Calculate compare value for 100ms:
    // OCR1A = (F_CPU / (Prescaler * Target Frequency)) - 1
    // For 100ms: Target Frequency = 10Hz (period = 0.1s)
    // OCR1A = (16,000,000 / (64 * 10)) - 1 = 24,999
    OCR1A = 24999;
 11e:	87 ea       	ldi	r24, 0xA7	; 167
 120:	91 e6       	ldi	r25, 0x61	; 97
 122:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 126:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    // Set prescaler to 64 and start the timer
    TCCR1B |= (1 << CS11) | (1 << CS10); // Prescaler 64
 12a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 12e:	83 60       	ori	r24, 0x03	; 3
 130:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

    // Clear the compare match flag
    TIFR1 |= (1 << OCF1A);
 134:	b1 9a       	sbi	0x16, 1	; 22

    // Wait for compare match
    while ((TIFR1 & (1 << OCF1A)) == 0);
 136:	b1 9b       	sbis	0x16, 1	; 22
 138:	fe cf       	rjmp	.-4      	; 0x136 <delay_timer+0x22>

    // Stop the timer
    TCCR1B = 0x00;
 13a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    // Clear the compare match flag
    TIFR1 |= (1 << OCF1A);
 13e:	b1 9a       	sbi	0x16, 1	; 22
}
 140:	08 95       	ret

00000142 <delay_100ms_units>:
#define SYMBOL_GAP_DURATION DOT_DURATION
#define LETTER_GAP_DURATION (3 * DOT_DURATION)
#define WORD_GAP_DURATION (7 * DOT_DURATION)

// Helper function: delay for N x 100ms using delay_timer()
void delay_100ms_units(uint8_t units) {
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	d8 2f       	mov	r29, r24
    for (uint8_t i = 0; i < units; i++) {
 148:	c0 e0       	ldi	r28, 0x00	; 0
 14a:	cd 13       	cpse	r28, r29
 14c:	03 c0       	rjmp	.+6      	; 0x154 <delay_100ms_units+0x12>
        delay_timer();
    }
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret
#define WORD_GAP_DURATION (7 * DOT_DURATION)

// Helper function: delay for N x 100ms using delay_timer()
void delay_100ms_units(uint8_t units) {
    for (uint8_t i = 0; i < units; i++) {
        delay_timer();
 154:	0e 94 8a 00 	call	0x114	; 0x114 <delay_timer>
#define LETTER_GAP_DURATION (3 * DOT_DURATION)
#define WORD_GAP_DURATION (7 * DOT_DURATION)

// Helper function: delay for N x 100ms using delay_timer()
void delay_100ms_units(uint8_t units) {
    for (uint8_t i = 0; i < units; i++) {
 158:	cf 5f       	subi	r28, 0xFF	; 255
 15a:	f7 cf       	rjmp	.-18     	; 0x14a <delay_100ms_units+0x8>

0000015c <signal_morse>:
        delay_timer();
    }
}

// Function to signal a single Morse code character (dot/dash sequence)
void signal_morse(const char* morse_string) {
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	00 d0       	rcall	.+0      	; 0x166 <signal_morse+0xa>
 166:	00 d0       	rcall	.+0      	; 0x168 <signal_morse+0xc>
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	8c 01       	movw	r16, r24
    int i = 0;
    while (morse_string[i] != '\0') {
 16e:	f8 01       	movw	r30, r16
 170:	81 91       	ld	r24, Z+
 172:	8f 01       	movw	r16, r30
 174:	81 11       	cpse	r24, r1
 176:	09 c0       	rjmp	.+18     	; 0x18a <signal_morse+0x2e>
        if (morse_string[i+1] != '\0') {
            delay_100ms_units(SYMBOL_GAP_DURATION / 100);
        }
        i++;
    }
}
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	08 95       	ret
// Function to signal a single Morse code character (dot/dash sequence)
void signal_morse(const char* morse_string) {
    int i = 0;
    while (morse_string[i] != '\0') {
        // Turn ON LED
        LED_PORT |= (1 << LED_PIN);
 18a:	2d 9a       	sbi	0x05, 5	; 5

        // Determine ON duration in ms
        uint16_t on_duration_ms = (morse_string[i] == '.') ? DOT_DURATION : DASH_DURATION;
 18c:	f8 01       	movw	r30, r16
 18e:	31 97       	sbiw	r30, 0x01	; 1
 190:	80 81       	ld	r24, Z
 192:	48 e5       	ldi	r20, 0x58	; 88
 194:	52 e0       	ldi	r21, 0x02	; 2
 196:	8e 32       	cpi	r24, 0x2E	; 46
 198:	11 f4       	brne	.+4      	; 0x19e <signal_morse+0x42>
 19a:	48 ec       	ldi	r20, 0xC8	; 200
 19c:	50 e0       	ldi	r21, 0x00	; 0
        uint16_t elapsed = 0;
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	80 e0       	ldi	r24, 0x00	; 0
        while (elapsed < on_duration_ms) {
            // Toggle buzzer pin for 500 Hz (1 ms period: 0.5 ms high, 0.5 ms low)
            BUZZER_PORT |= (1 << BUZZER_PIN); // High
 1a2:	29 9a       	sbi	0x05, 1	; 5
            // Delay 0.5 ms
            for (volatile uint16_t d = 0; d < (F_CPU / 1000 / 8 / 2); d++) { asm volatile ("nop"); }
 1a4:	1c 82       	std	Y+4, r1	; 0x04
 1a6:	1b 82       	std	Y+3, r1	; 0x03
 1a8:	2b 81       	ldd	r18, Y+3	; 0x03
 1aa:	3c 81       	ldd	r19, Y+4	; 0x04
 1ac:	28 3e       	cpi	r18, 0xE8	; 232
 1ae:	33 40       	sbci	r19, 0x03	; 3
 1b0:	b0 f0       	brcs	.+44     	; 0x1de <signal_morse+0x82>
            BUZZER_PORT &= ~(1 << BUZZER_PIN); // Low
 1b2:	29 98       	cbi	0x05, 1	; 5
            // Delay 0.5 ms
            for (volatile uint16_t d = 0; d < (F_CPU / 1000 / 8 / 2); d++) { asm volatile ("nop"); }
 1b4:	1a 82       	std	Y+2, r1	; 0x02
 1b6:	19 82       	std	Y+1, r1	; 0x01
 1b8:	29 81       	ldd	r18, Y+1	; 0x01
 1ba:	3a 81       	ldd	r19, Y+2	; 0x02
 1bc:	28 3e       	cpi	r18, 0xE8	; 232
 1be:	33 40       	sbci	r19, 0x03	; 3
 1c0:	b0 f0       	brcs	.+44     	; 0x1ee <signal_morse+0x92>
            elapsed++;
 1c2:	01 96       	adiw	r24, 0x01	; 1
        LED_PORT |= (1 << LED_PIN);

        // Determine ON duration in ms
        uint16_t on_duration_ms = (morse_string[i] == '.') ? DOT_DURATION : DASH_DURATION;
        uint16_t elapsed = 0;
        while (elapsed < on_duration_ms) {
 1c4:	48 17       	cp	r20, r24
 1c6:	59 07       	cpc	r21, r25
 1c8:	61 f7       	brne	.-40     	; 0x1a2 <signal_morse+0x46>
            for (volatile uint16_t d = 0; d < (F_CPU / 1000 / 8 / 2); d++) { asm volatile ("nop"); }
            elapsed++;
        }

        // Turn OFF LED and buzzer
        LED_PORT &= ~(1 << LED_PIN);
 1ca:	2d 98       	cbi	0x05, 5	; 5
        BUZZER_PORT &= ~(1 << BUZZER_PIN);
 1cc:	29 98       	cbi	0x05, 1	; 5

        // Inter-symbol gap (only if not last symbol)
        if (morse_string[i+1] != '\0') {
 1ce:	f8 01       	movw	r30, r16
 1d0:	80 81       	ld	r24, Z
 1d2:	88 23       	and	r24, r24
 1d4:	61 f2       	breq	.-104    	; 0x16e <signal_morse+0x12>
            delay_100ms_units(SYMBOL_GAP_DURATION / 100);
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	0e 94 a1 00 	call	0x142	; 0x142 <delay_100ms_units>
 1dc:	c8 cf       	rjmp	.-112    	; 0x16e <signal_morse+0x12>
        uint16_t elapsed = 0;
        while (elapsed < on_duration_ms) {
            // Toggle buzzer pin for 500 Hz (1 ms period: 0.5 ms high, 0.5 ms low)
            BUZZER_PORT |= (1 << BUZZER_PIN); // High
            // Delay 0.5 ms
            for (volatile uint16_t d = 0; d < (F_CPU / 1000 / 8 / 2); d++) { asm volatile ("nop"); }
 1de:	00 00       	nop
 1e0:	2b 81       	ldd	r18, Y+3	; 0x03
 1e2:	3c 81       	ldd	r19, Y+4	; 0x04
 1e4:	2f 5f       	subi	r18, 0xFF	; 255
 1e6:	3f 4f       	sbci	r19, 0xFF	; 255
 1e8:	3c 83       	std	Y+4, r19	; 0x04
 1ea:	2b 83       	std	Y+3, r18	; 0x03
 1ec:	dd cf       	rjmp	.-70     	; 0x1a8 <signal_morse+0x4c>
            BUZZER_PORT &= ~(1 << BUZZER_PIN); // Low
            // Delay 0.5 ms
            for (volatile uint16_t d = 0; d < (F_CPU / 1000 / 8 / 2); d++) { asm volatile ("nop"); }
 1ee:	00 00       	nop
 1f0:	29 81       	ldd	r18, Y+1	; 0x01
 1f2:	3a 81       	ldd	r19, Y+2	; 0x02
 1f4:	2f 5f       	subi	r18, 0xFF	; 255
 1f6:	3f 4f       	sbci	r19, 0xFF	; 255
 1f8:	3a 83       	std	Y+2, r19	; 0x02
 1fa:	29 83       	std	Y+1, r18	; 0x01
 1fc:	dd cf       	rjmp	.-70     	; 0x1b8 <signal_morse+0x5c>

000001fe <letter_gap>:
    }
}

// Function to handle the gap between letters
void letter_gap() {
    delay_100ms_units(LETTER_GAP_DURATION / 100);
 1fe:	86 e0       	ldi	r24, 0x06	; 6
 200:	0c 94 a1 00 	jmp	0x142	; 0x142 <delay_100ms_units>

00000204 <word_gap>:
}

// Function to handle the gap between words
void word_gap() {
    delay_100ms_units(WORD_GAP_DURATION / 100);
 204:	8e e0       	ldi	r24, 0x0E	; 14
 206:	0c 94 a1 00 	jmp	0x142	; 0x142 <delay_100ms_units>

0000020a <get_morse_code>:
}


// Helper: Get Morse code string for a character (A-Z, 0-9)
const char* get_morse_code(char c) {
 20a:	e8 2f       	mov	r30, r24
    if (c >= 'A' && c <= 'Z') {
 20c:	8f eb       	ldi	r24, 0xBF	; 191
 20e:	8e 0f       	add	r24, r30
 210:	8a 31       	cpi	r24, 0x1A	; 26
 212:	48 f4       	brcc	.+18     	; 0x226 <get_morse_code+0x1c>
        return morseCodeMap[c - 'A'];
 214:	e1 54       	subi	r30, 0x41	; 65
 216:	ff 0b       	sbc	r31, r31
    } else if (c >= 'a' && c <= 'z') {
        return morseCodeMap[c - 'a'];
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	e0 50       	subi	r30, 0x00	; 0
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	80 81       	ld	r24, Z
 222:	91 81       	ldd	r25, Z+1	; 0x01
 224:	08 95       	ret

// Helper: Get Morse code string for a character (A-Z, 0-9)
const char* get_morse_code(char c) {
    if (c >= 'A' && c <= 'Z') {
        return morseCodeMap[c - 'A'];
    } else if (c >= 'a' && c <= 'z') {
 226:	8f e9       	ldi	r24, 0x9F	; 159
 228:	8e 0f       	add	r24, r30
 22a:	8a 31       	cpi	r24, 0x1A	; 26
 22c:	18 f4       	brcc	.+6      	; 0x234 <get_morse_code+0x2a>
        return morseCodeMap[c - 'a'];
 22e:	e1 56       	subi	r30, 0x61	; 97
 230:	ff 0b       	sbc	r31, r31
 232:	f2 cf       	rjmp	.-28     	; 0x218 <get_morse_code+0xe>
    } else if (c >= '0' && c <= '9') {
 234:	80 ed       	ldi	r24, 0xD0	; 208
 236:	8e 0f       	add	r24, r30
        return morseCodeMap[26 + (c - '0')];
 238:	e6 51       	subi	r30, 0x16	; 22
 23a:	ff 0b       	sbc	r31, r31
const char* get_morse_code(char c) {
    if (c >= 'A' && c <= 'Z') {
        return morseCodeMap[c - 'A'];
    } else if (c >= 'a' && c <= 'z') {
        return morseCodeMap[c - 'a'];
    } else if (c >= '0' && c <= '9') {
 23c:	8a 30       	cpi	r24, 0x0A	; 10
 23e:	60 f3       	brcs	.-40     	; 0x218 <get_morse_code+0xe>
        return morseCodeMap[26 + (c - '0')];
    } else {
        return NULL;
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 244:	08 95       	ret

00000246 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 246:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	85 e0       	ldi	r24, 0x05	; 5
 24a:	8a 95       	dec	r24
 24c:	f1 f7       	brne	.-4      	; 0x24a <toggle_e+0x4>
 24e:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
 250:	42 98       	cbi	0x08, 2	; 8
}
 252:	08 95       	ret

00000254 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 254:	cf 93       	push	r28
 256:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
 258:	66 23       	and	r22, r22
 25a:	41 f1       	breq	.+80     	; 0x2ac <lcd_write+0x58>
       lcd_rs_high();
 25c:	40 9a       	sbi	0x08, 0	; 8
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
    }
    lcd_rw_low();    /* RW=0  write mode      */
 25e:	41 98       	cbi	0x08, 1	; 8
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 260:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 262:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 264:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 266:	55 9a       	sbi	0x0a, 5	; 10
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 268:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 26a:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 26c:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 26e:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 270:	c7 fd       	sbrc	r28, 7
 272:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 274:	c6 fd       	sbrc	r28, 6
 276:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 278:	c5 fd       	sbrc	r28, 5
 27a:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 27c:	c4 fd       	sbrc	r28, 4
 27e:	5a 9a       	sbi	0x0b, 2	; 11
        lcd_e_toggle();
 280:	0e 94 23 01 	call	0x246	; 0x246 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 284:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 286:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 288:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 28a:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 28c:	c3 fd       	sbrc	r28, 3
 28e:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 290:	c2 fd       	sbrc	r28, 2
 292:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 294:	c1 fd       	sbrc	r28, 1
 296:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 298:	c0 fd       	sbrc	r28, 0
 29a:	5a 9a       	sbi	0x0b, 2	; 11
        lcd_e_toggle();        
 29c:	0e 94 23 01 	call	0x246	; 0x246 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 2a0:	5a 9a       	sbi	0x0b, 2	; 11
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 2a2:	5b 9a       	sbi	0x0b, 3	; 11
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 2a4:	5c 9a       	sbi	0x0b, 4	; 11
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 2a6:	5d 9a       	sbi	0x0b, 5	; 11
    }
}
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret


    if (rs) {        /* write data        (RS=1, RW=0) */
       lcd_rs_high();
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 2ac:	40 98       	cbi	0x08, 0	; 8
 2ae:	d7 cf       	rjmp	.-82     	; 0x25e <lcd_write+0xa>

000002b0 <lcd_read.constprop.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 2b0:	40 98       	cbi	0x08, 0	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
 2b2:	41 9a       	sbi	0x08, 1	; 8
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 2b4:	52 98       	cbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 2b6:	53 98       	cbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 2b8:	54 98       	cbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 2ba:	55 98       	cbi	0x0a, 5	; 10
                
        /* read high nibble first */
        lcd_e_high();
 2bc:	42 9a       	sbi	0x08, 2	; 8
 2be:	85 e0       	ldi	r24, 0x05	; 5
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_read.constprop.0+0x10>
 2c4:	00 00       	nop
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 2c6:	4a 9b       	sbis	0x09, 2	; 9
 2c8:	1b c0       	rjmp	.+54     	; 0x300 <lcd_read.constprop.0+0x50>
 2ca:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 2cc:	4b 99       	sbic	0x09, 3	; 9
 2ce:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 2d0:	4c 99       	sbic	0x09, 4	; 9
 2d2:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 2d4:	4d 99       	sbic	0x09, 5	; 9
 2d6:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 2d8:	42 98       	cbi	0x08, 2	; 8
 2da:	95 e0       	ldi	r25, 0x05	; 5
 2dc:	9a 95       	dec	r25
 2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd_read.constprop.0+0x2c>
 2e0:	00 00       	nop

        lcd_e_delay();                       /* Enable 500ns low       */
    
        /* read low nibble */    
        lcd_e_high();
 2e2:	42 9a       	sbi	0x08, 2	; 8
 2e4:	95 e0       	ldi	r25, 0x05	; 5
 2e6:	9a 95       	dec	r25
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <lcd_read.constprop.0+0x36>
 2ea:	00 00       	nop
        lcd_e_delay();
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 2ec:	4a 99       	sbic	0x09, 2	; 9
 2ee:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 2f0:	4b 99       	sbic	0x09, 3	; 9
 2f2:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 2f4:	4c 99       	sbic	0x09, 4	; 9
 2f6:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 2f8:	4d 99       	sbic	0x09, 5	; 9
 2fa:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 2fc:	42 98       	cbi	0x08, 2	; 8
    }
    return data;
}
 2fe:	08 95       	ret
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	e4 cf       	rjmp	.-56     	; 0x2cc <lcd_read.constprop.0+0x1c>

00000304 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 304:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_read.constprop.0>
 308:	87 fd       	sbrc	r24, 7
 30a:	fc cf       	rjmp	.-8      	; 0x304 <lcd_waitbusy>
 30c:	85 e1       	ldi	r24, 0x15	; 21
 30e:	8a 95       	dec	r24
 310:	f1 f7       	brne	.-4      	; 0x30e <lcd_waitbusy+0xa>
 312:	00 00       	nop
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 314:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <lcd_read.constprop.0>

00000318 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 318:	cf 93       	push	r28
 31a:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 31c:	0e 94 82 01 	call	0x304	; 0x304 <lcd_waitbusy>
    lcd_write(cmd,0);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	8c 2f       	mov	r24, r28
}
 324:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
 326:	0c 94 2a 01 	jmp	0x254	; 0x254 <lcd_write>

0000032a <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 32a:	cf 93       	push	r28
 32c:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 32e:	0e 94 82 01 	call	0x304	; 0x304 <lcd_waitbusy>
    lcd_write(data,1);
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	8c 2f       	mov	r24, r28
}
 336:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
 338:	0c 94 2a 01 	jmp	0x254	; 0x254 <lcd_write>

0000033c <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 33c:	61 11       	cpse	r22, r1
 33e:	03 c0       	rjmp	.+6      	; 0x346 <lcd_gotoxy+0xa>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 340:	80 58       	subi	r24, 0x80	; 128
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 342:	0c 94 8c 01 	jmp	0x318	; 0x318 <lcd_command>
 346:	80 54       	subi	r24, 0x40	; 64
 348:	fc cf       	rjmp	.-8      	; 0x342 <lcd_gotoxy+0x6>

0000034a <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 34a:	0e 94 82 01 	call	0x304	; 0x304 <lcd_waitbusy>
}
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	08 95       	ret

00000352 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0c 94 8c 01 	jmp	0x318	; 0x318 <lcd_command>

00000358 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	0c 94 8c 01 	jmp	0x318	; 0x318 <lcd_command>

0000035e <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 35e:	cf 93       	push	r28
 360:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 362:	0e 94 82 01 	call	0x304	; 0x304 <lcd_waitbusy>
    if (c=='\n')
 366:	ca 30       	cpi	r28, 0x0A	; 10
 368:	49 f4       	brne	.+18     	; 0x37c <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 36a:	80 34       	cpi	r24, 0x40	; 64
 36c:	28 f0       	brcs	.+10     	; 0x378 <lcd_putc+0x1a>
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
 36e:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 370:	80 58       	subi	r24, 0x80	; 128
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
 372:	cf 91       	pop	r28
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 374:	0c 94 8c 01 	jmp	0x318	; 0x318 <lcd_command>
#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
 378:	80 e4       	ldi	r24, 0x40	; 64
 37a:	fa cf       	rjmp	.-12     	; 0x370 <lcd_putc+0x12>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	8c 2f       	mov	r24, r28
    }

}/* lcd_putc */
 380:	cf 91       	pop	r28
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 382:	0c 94 2a 01 	jmp	0x254	; 0x254 <lcd_write>

00000386 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 38c:	89 91       	ld	r24, Y+
 38e:	81 11       	cpse	r24, r1
 390:	03 c0       	rjmp	.+6      	; 0x398 <lcd_puts+0x12>
        lcd_putc(c);
    }

}/* lcd_puts */
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 398:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_putc>
 39c:	f7 cf       	rjmp	.-18     	; 0x38c <lcd_puts+0x6>

0000039e <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 3a4:	fe 01       	movw	r30, r28
 3a6:	84 91       	lpm	r24, Z
 3a8:	21 96       	adiw	r28, 0x01	; 1
 3aa:	81 11       	cpse	r24, r1
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <lcd_puts_p+0x16>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 3b4:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_putc>
 3b8:	f5 cf       	rjmp	.-22     	; 0x3a4 <lcd_puts_p+0x6>

000003ba <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 3ba:	cf 93       	push	r28
 3bc:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 3be:	38 9a       	sbi	0x07, 0	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 3c0:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 3c2:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 3c4:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 3c6:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 3c8:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 3ca:	55 9a       	sbi	0x0a, 5	; 10
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	99 ef       	ldi	r25, 0xF9	; 249
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <lcd_init+0x16>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <lcd_init+0x1c>
 3d6:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 3d8:	5b 9a       	sbi	0x0b, 3	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 3da:	5a 9a       	sbi	0x0b, 2	; 11
    lcd_e_toggle();
 3dc:	0e 94 23 01 	call	0x246	; 0x246 <toggle_e>
 3e0:	8f e1       	ldi	r24, 0x1F	; 31
 3e2:	9e e4       	ldi	r25, 0x4E	; 78
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_init+0x2a>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <lcd_init+0x30>
 3ea:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 3ec:	0e 94 23 01 	call	0x246	; 0x246 <toggle_e>
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <lcd_init+0x3a>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <lcd_init+0x40>
 3fa:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 3fc:	0e 94 23 01 	call	0x246	; 0x246 <toggle_e>
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 40c:	5a 98       	cbi	0x0b, 2	; 11
    lcd_e_toggle();
 40e:	0e 94 23 01 	call	0x246	; 0x246 <toggle_e>
 412:	8f ef       	ldi	r24, 0xFF	; 255
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 41e:	88 e2       	ldi	r24, 0x28	; 40
 420:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 424:	88 e0       	ldi	r24, 0x08	; 8
 426:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 42a:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 42e:	86 e0       	ldi	r24, 0x06	; 6
 430:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 434:	8c 2f       	mov	r24, r28

}/* lcd_init */
 436:	cf 91       	pop	r28
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    lcd_clrscr();                           /* display clear                */ 
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */
 438:	0c 94 8c 01 	jmp	0x318	; 0x318 <lcd_command>

0000043c <main>:


int main(void) {
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
 444:	c0 58       	subi	r28, 0x80	; 128
 446:	d1 09       	sbc	r29, r1
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	f8 94       	cli
 44c:	de bf       	out	0x3e, r29	; 62
 44e:	0f be       	out	0x3f, r0	; 63
 450:	cd bf       	out	0x3d, r28	; 61
    // Set LED and buzzer pins as output
    LED_DDR |= (1 << LED_PIN) | (1 << LED_LETTER_PIN) | (1 << LED_WORD_PIN) | (1 << LED_SENT_PIN);
 452:	84 b1       	in	r24, 0x04	; 4
 454:	8c 63       	ori	r24, 0x3C	; 60
 456:	84 b9       	out	0x04, r24	; 4
    BUZZER_DDR |= (1 << BUZZER_PIN);
 458:	21 9a       	sbi	0x04, 1	; 4

    // Ensure all LEDs and buzzer are off
    LED_PORT &= ~(1 << LED_PIN);
 45a:	2d 98       	cbi	0x05, 5	; 5
    LED_PORT &= ~(1 << LED_LETTER_PIN);
 45c:	2a 98       	cbi	0x05, 2	; 5
    LED_PORT &= ~(1 << LED_WORD_PIN);
 45e:	2b 98       	cbi	0x05, 3	; 5
    LED_PORT &= ~(1 << LED_SENT_PIN);
 460:	2c 98       	cbi	0x05, 4	; 5
    BUZZER_PORT &= ~(1 << BUZZER_PIN);
 462:	29 98       	cbi	0x05, 1	; 5

    // Initialize USART
    usart_init();
 464:	0e 94 4b 00 	call	0x96	; 0x96 <usart_init>

    // Initialize LCD
    lcd_init(LCD_DISP_ON);
 468:	8c e0       	ldi	r24, 0x0C	; 12
 46a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_init>
    lcd_clrscr();
 46e:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_clrscr>
    lcd_puts("Morse Decoder");
 472:	88 e4       	ldi	r24, 0x48	; 72
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	0e 94 c3 01 	call	0x386	; 0x386 <lcd_puts>
    uint8_t lcd_col = 0;

    // Buffer for input
    #define BUFFER_SIZE 128
    char buffer[BUFFER_SIZE];
    uint8_t buf_idx = 0;
 47a:	10 e0       	ldi	r17, 0x00	; 0

    while (1) {
        char c = usart_receive();
 47c:	0e 94 77 00 	call	0xee	; 0xee <usart_receive>
 480:	08 2f       	mov	r16, r24
        usart_send(c); // Echo
 482:	0e 94 70 00 	call	0xe0	; 0xe0 <usart_send>

        // If Enter is pressed, process buffer
        if (c == '\n' || c == '\r') {
 486:	0a 30       	cpi	r16, 0x0A	; 10
 488:	19 f0       	breq	.+6      	; 0x490 <main+0x54>
 48a:	0d 30       	cpi	r16, 0x0D	; 13
 48c:	09 f0       	breq	.+2      	; 0x490 <main+0x54>
 48e:	52 c0       	rjmp	.+164    	; 0x534 <main+0xf8>
            buffer[buf_idx] = '\0';
 490:	e1 e0       	ldi	r30, 0x01	; 1
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	ec 0f       	add	r30, r28
 496:	fd 1f       	adc	r31, r29
 498:	e1 0f       	add	r30, r17
 49a:	f1 1d       	adc	r31, r1
 49c:	10 82       	st	Z, r1
            uint8_t i = 0;
            lcd_col = 0;
            lcd_clrscr();
 49e:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_clrscr>
        usart_send(c); // Echo

        // If Enter is pressed, process buffer
        if (c == '\n' || c == '\r') {
            buffer[buf_idx] = '\0';
            uint8_t i = 0;
 4a2:	f1 2c       	mov	r15, r1
            lcd_col = 0;
            lcd_clrscr();
            while (buffer[i] != '\0') {
 4a4:	0f 2d       	mov	r16, r15
 4a6:	10 e0       	ldi	r17, 0x00	; 0
 4a8:	e1 e0       	ldi	r30, 0x01	; 1
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	ec 0f       	add	r30, r28
 4ae:	fd 1f       	adc	r31, r29
 4b0:	e0 0f       	add	r30, r16
 4b2:	f1 1f       	adc	r31, r17
 4b4:	80 81       	ld	r24, Z
 4b6:	81 11       	cpse	r24, r1
 4b8:	0c c0       	rjmp	.+24     	; 0x4d2 <main+0x96>
                    }
                }
                i++;
            }
            // End of sentence
            lcd_clrscr();
 4ba:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_clrscr>
            lcd_puts("end of sentence");
 4be:	86 e5       	ldi	r24, 0x56	; 86
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 c3 01 	call	0x386	; 0x386 <lcd_puts>
            LED_PORT |= (1 << LED_SENT_PIN);
 4c6:	2c 9a       	sbi	0x05, 4	; 5
            delay_100ms_units(10); // Light up for 1s
 4c8:	8a e0       	ldi	r24, 0x0A	; 10
 4ca:	0e 94 a1 00 	call	0x142	; 0x142 <delay_100ms_units>
            LED_PORT &= ~(1 << LED_SENT_PIN);
 4ce:	2c 98       	cbi	0x05, 4	; 5
 4d0:	d4 cf       	rjmp	.-88     	; 0x47a <main+0x3e>
            buffer[buf_idx] = '\0';
            uint8_t i = 0;
            lcd_col = 0;
            lcd_clrscr();
            while (buffer[i] != '\0') {
                if (buffer[i] == ' ') {
 4d2:	80 32       	cpi	r24, 0x20	; 32
 4d4:	49 f4       	brne	.+18     	; 0x4e8 <main+0xac>
                    // Word finished
                    LED_PORT |= (1 << LED_WORD_PIN);
 4d6:	2b 9a       	sbi	0x05, 3	; 5
                    word_gap();
 4d8:	0e 94 02 01 	call	0x204	; 0x204 <word_gap>
                    LED_PORT &= ~(1 << LED_WORD_PIN);
 4dc:	2b 98       	cbi	0x05, 3	; 5
                    // Add space to LCD
                    lcd_putc(' ');
 4de:	80 e2       	ldi	r24, 0x20	; 32
                        const char* morse_str = morse;
                        for (uint8_t m = 0; morse_str[m] != '\0'; m++) {
                            lcd_putc(morse_str[m]);
                        }
                        lcd_putc(' ');
                        lcd_putc(buffer[i]);
 4e0:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_putc>
                    }
                }
                i++;
 4e4:	f3 94       	inc	r15
 4e6:	de cf       	rjmp	.-68     	; 0x4a4 <main+0x68>
                    LED_PORT &= ~(1 << LED_WORD_PIN);
                    // Add space to LCD
                    lcd_putc(' ');
                    lcd_col++;
                } else {
                    const char* morse = get_morse_code(buffer[i]);
 4e8:	0e 94 05 01 	call	0x20a	; 0x20a <get_morse_code>
 4ec:	6c 01       	movw	r12, r24
                    if (morse != NULL) {
 4ee:	00 97       	sbiw	r24, 0x00	; 0
 4f0:	c9 f3       	breq	.-14     	; 0x4e4 <main+0xa8>
                        signal_morse(morse);
 4f2:	0e 94 ae 00 	call	0x15c	; 0x15c <signal_morse>
                        // Light up LED_LETTER_PIN briefly after signaling a letter
                        LED_PORT |= (1 << LED_LETTER_PIN);
 4f6:	2a 9a       	sbi	0x05, 2	; 5
                        delay_100ms_units(2); // 200ms
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	0e 94 a1 00 	call	0x142	; 0x142 <delay_100ms_units>
                        LED_PORT &= ~(1 << LED_LETTER_PIN);
 4fe:	2a 98       	cbi	0x05, 2	; 5
                        letter_gap();
 500:	0e 94 ff 00 	call	0x1fe	; 0x1fe <letter_gap>
                        // Show Morse code and character on LCD, clear for each character
                        lcd_clrscr();
 504:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_clrscr>
                        const char* morse_str = morse;
                        for (uint8_t m = 0; morse_str[m] != '\0'; m++) {
 508:	e1 2c       	mov	r14, r1
 50a:	f6 01       	movw	r30, r12
 50c:	ee 0d       	add	r30, r14
 50e:	f1 1d       	adc	r31, r1
 510:	80 81       	ld	r24, Z
 512:	81 11       	cpse	r24, r1
 514:	0b c0       	rjmp	.+22     	; 0x52c <main+0xf0>
                            lcd_putc(morse_str[m]);
                        }
                        lcd_putc(' ');
 516:	80 e2       	ldi	r24, 0x20	; 32
 518:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_putc>
                        lcd_putc(buffer[i]);
 51c:	e1 e0       	ldi	r30, 0x01	; 1
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	ec 0f       	add	r30, r28
 522:	fd 1f       	adc	r31, r29
 524:	e0 0f       	add	r30, r16
 526:	f1 1f       	adc	r31, r17
 528:	80 81       	ld	r24, Z
 52a:	da cf       	rjmp	.-76     	; 0x4e0 <main+0xa4>
                        letter_gap();
                        // Show Morse code and character on LCD, clear for each character
                        lcd_clrscr();
                        const char* morse_str = morse;
                        for (uint8_t m = 0; morse_str[m] != '\0'; m++) {
                            lcd_putc(morse_str[m]);
 52c:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_putc>
                        LED_PORT &= ~(1 << LED_LETTER_PIN);
                        letter_gap();
                        // Show Morse code and character on LCD, clear for each character
                        lcd_clrscr();
                        const char* morse_str = morse;
                        for (uint8_t m = 0; morse_str[m] != '\0'; m++) {
 530:	e3 94       	inc	r14
 532:	eb cf       	rjmp	.-42     	; 0x50a <main+0xce>
            delay_100ms_units(10); // Light up for 1s
            LED_PORT &= ~(1 << LED_SENT_PIN);
            buf_idx = 0; // Reset buffer
        } else {
            // Buffer printable chars (ignore others)
            if (buf_idx < BUFFER_SIZE - 1 && (c >= 32 && c <= 126)) {
 534:	1f 37       	cpi	r17, 0x7F	; 127
 536:	08 f0       	brcs	.+2      	; 0x53a <main+0xfe>
 538:	a1 cf       	rjmp	.-190    	; 0x47c <main+0x40>
 53a:	80 ee       	ldi	r24, 0xE0	; 224
 53c:	80 0f       	add	r24, r16
 53e:	8f 35       	cpi	r24, 0x5F	; 95
 540:	08 f0       	brcs	.+2      	; 0x544 <main+0x108>
 542:	9c cf       	rjmp	.-200    	; 0x47c <main+0x40>
                buffer[buf_idx++] = c;
 544:	e1 e0       	ldi	r30, 0x01	; 1
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	ec 0f       	add	r30, r28
 54a:	fd 1f       	adc	r31, r29
 54c:	e1 0f       	add	r30, r17
 54e:	f1 1d       	adc	r31, r1
 550:	00 83       	st	Z, r16
 552:	1f 5f       	subi	r17, 0xFF	; 255
 554:	93 cf       	rjmp	.-218    	; 0x47c <main+0x40>

00000556 <_exit>:
 556:	f8 94       	cli

00000558 <__stop_program>:
 558:	ff cf       	rjmp	.-2      	; 0x558 <__stop_program>
