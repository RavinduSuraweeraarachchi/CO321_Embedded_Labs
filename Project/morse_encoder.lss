
morse_encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  000005a6  0000061a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000131c  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a93  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000080b  00000000  00000000  00002593  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  00002da0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056c  00000000  00000000  00002fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b4e  00000000  00000000  0000353c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000408a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <main>
  8e:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <usart_init>:
{

    /*
    Enabling the Transmitter
    */
    UCSR0B |= (1 << TXEN0); // Enable transmitter
  96:	a1 ec       	ldi	r26, 0xC1	; 193
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	8c 91       	ld	r24, X
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	8c 93       	st	X, r24

    /*
    Enabling the Receiver
    */
    UCSR0B |= (1 << RXEN0); // Enable receiver
  a0:	8c 91       	ld	r24, X
  a2:	80 61       	ori	r24, 0x10	; 16
  a4:	8c 93       	st	X, r24

    /*
    Setting the Baud Rate
    */
    UBRR0L = (uint8_t)(UBRR); // Load lower 8 bits of UBRR
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UBRR0H = (uint8_t)((UBRR) >> 8); // Load upper 4 bits of UBRR
  ac:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    // It is alright to do this as last 4 bits of UBRR0H are reserved

    /*
    Setting to Asynchronous Mode
    */
    UCSR0C &= ~(1<<UMSEL01);
  b0:	e2 ec       	ldi	r30, 0xC2	; 194
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8f 77       	andi	r24, 0x7F	; 127
  b8:	80 83       	st	Z, r24
    UCSR0C &= ~(1<<UMSEL00);
  ba:	80 81       	ld	r24, Z
  bc:	8f 7b       	andi	r24, 0xBF	; 191
  be:	80 83       	st	Z, r24

    /*
    Setting 8-bit data mode
    */
    UCSR0B &= ~(1 << UCSZ02); // Clear UCSZ02
  c0:	8c 91       	ld	r24, X
  c2:	8b 7f       	andi	r24, 0xFB	; 251
  c4:	8c 93       	st	X, r24
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // Set UCSZ01 and UCSZ00
  c6:	80 81       	ld	r24, Z
  c8:	86 60       	ori	r24, 0x06	; 6
  ca:	80 83       	st	Z, r24

    /*
    Setting the Parity Mode   
    */
    
    UCSR0C &= ~(1<<UPM00);
  cc:	80 81       	ld	r24, Z
  ce:	8f 7e       	andi	r24, 0xEF	; 239
  d0:	80 83       	st	Z, r24
    UCSR0C &= ~(1<<UPM01);
  d2:	80 81       	ld	r24, Z
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	80 83       	st	Z, r24

    /*    Setting the Stop Bit
    */
    UCSR0C &= ~(1 << USBS0); 
  d8:	80 81       	ld	r24, Z
  da:	87 7f       	andi	r24, 0xF7	; 247
  dc:	80 83       	st	Z, r24

}
  de:	08 95       	ret

000000e0 <usart_send>:

void usart_send(char send_char)
{
    // We can wait until the transmit buffer is empty
    // i.e. it waits as long as the UDRE0 bit is not set (0)
    while (!(UCSR0A & (1 << UDRE0)));
  e0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e4:	95 ff       	sbrs	r25, 5
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <usart_send>

    // Load the character into the transmit buffer
    UDR0 = send_char;   
  e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  ec:	08 95       	ret

000000ee <usart_receive>:

char usart_receive(void)
{
    // Wait until a character is received
    while (!(UCSR0A & (1 << RXC0)));
  ee:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f2:	87 ff       	sbrs	r24, 7
  f4:	fc cf       	rjmp	.-8      	; 0xee <usart_receive>

    // Return the received character from the data register
    return UDR0;
  f6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  fa:	08 95       	ret

000000fc <usart_send_string>:


void usart_send_string(char* str)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	ec 01       	movw	r28, r24
    while (*str != '\0')
 102:	89 91       	ld	r24, Y+
 104:	81 11       	cpse	r24, r1
 106:	03 c0       	rjmp	.+6      	; 0x10e <usart_send_string+0x12>
    {
        usart_send(*str);
        str++;
    }
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

void usart_send_string(char* str)
{
    while (*str != '\0')
    {
        usart_send(*str);
 10e:	0e 94 70 00 	call	0xe0	; 0xe0 <usart_send>
 112:	f7 cf       	rjmp	.-18     	; 0x102 <usart_send_string+0x6>

00000114 <delay_timer>:

// 100ms delay using Timer1 in CTC mode, prescaler 64
void delay_timer(void)
{
    // Set Timer1 to CTC mode (Clear Timer on Compare Match)
    TCCR1A = 0x00;
 114:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = (1 << WGM12); // CTC mode
 118:	88 e0       	ldi	r24, 0x08	; 8
 11a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

    // Calculate compare value for 100ms:
    // OCR1A = (F_CPU / (Prescaler * Target Frequency)) - 1
    // For 100ms: Target Frequency = 10Hz (period = 0.1s)
    // OCR1A = (16,000,000 / (64 * 10)) - 1 = 24,999
    OCR1A = 24999;
 11e:	87 ea       	ldi	r24, 0xA7	; 167
 120:	91 e6       	ldi	r25, 0x61	; 97
 122:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 126:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    // Set prescaler to 64 and start the timer
    TCCR1B |= (1 << CS11) | (1 << CS10); // Prescaler 64
 12a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 12e:	83 60       	ori	r24, 0x03	; 3
 130:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

    // Clear the compare match flag
    TIFR1 |= (1 << OCF1A);
 134:	b1 9a       	sbi	0x16, 1	; 22

    // Wait for compare match
    while ((TIFR1 & (1 << OCF1A)) == 0);
 136:	b1 9b       	sbis	0x16, 1	; 22
 138:	fe cf       	rjmp	.-4      	; 0x136 <delay_timer+0x22>

    // Stop the timer
    TCCR1B = 0x00;
 13a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    // Clear the compare match flag
    TIFR1 |= (1 << OCF1A);
 13e:	b1 9a       	sbi	0x16, 1	; 22
}
 140:	08 95       	ret

00000142 <decode_morse>:
    { ".....", '5' }, { "-....", '6' }, { "--...", '7' }, { "---..", '8' }, { "----.", '9' },
    { NULL, 0 }
};

// Helper: decode Morse string to char
char decode_morse(const char* code) {
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	7c 01       	movw	r14, r24
 150:	08 e4       	ldi	r16, 0x48	; 72
 152:	11 e0       	ldi	r17, 0x01	; 1
    for (int i = 0; morseDecodeTable[i].code != NULL; i++) {
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	c0 e0       	ldi	r28, 0x00	; 0
 158:	f8 01       	movw	r30, r16
 15a:	80 81       	ld	r24, Z
 15c:	91 81       	ldd	r25, Z+1	; 0x01
 15e:	00 97       	sbiw	r24, 0x00	; 0
 160:	11 f4       	brne	.+4      	; 0x166 <decode_morse+0x24>
        if (strcmp(morseDecodeTable[i].code, code) == 0) return morseDecodeTable[i].letter;
    }
    return '?';
 162:	8f e3       	ldi	r24, 0x3F	; 63
 164:	0f c0       	rjmp	.+30     	; 0x184 <decode_morse+0x42>
};

// Helper: decode Morse string to char
char decode_morse(const char* code) {
    for (int i = 0; morseDecodeTable[i].code != NULL; i++) {
        if (strcmp(morseDecodeTable[i].code, code) == 0) return morseDecodeTable[i].letter;
 166:	b7 01       	movw	r22, r14
 168:	0e 94 c8 02 	call	0x590	; 0x590 <strcmp>
 16c:	0d 5f       	subi	r16, 0xFD	; 253
 16e:	1f 4f       	sbci	r17, 0xFF	; 255
 170:	89 2b       	or	r24, r25
 172:	79 f4       	brne	.+30     	; 0x192 <decode_morse+0x50>
 174:	fe 01       	movw	r30, r28
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	ec 0f       	add	r30, r28
 17c:	fd 1f       	adc	r31, r29
 17e:	e8 5b       	subi	r30, 0xB8	; 184
 180:	fe 4f       	sbci	r31, 0xFE	; 254
 182:	82 81       	ldd	r24, Z+2	; 0x02
    }
    return '?';
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	ff 90       	pop	r15
 18e:	ef 90       	pop	r14
 190:	08 95       	ret
    { NULL, 0 }
};

// Helper: decode Morse string to char
char decode_morse(const char* code) {
    for (int i = 0; morseDecodeTable[i].code != NULL; i++) {
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	e1 cf       	rjmp	.-62     	; 0x158 <decode_morse+0x16>

00000196 <is_AR>:
    return '?';
}

// Helper: check for AR (.-.-.)
uint8_t is_AR(const char* code) {
    return strcmp(code, ".-.-.") == 0;
 196:	67 eb       	ldi	r22, 0xB7	; 183
 198:	71 e0       	ldi	r23, 0x01	; 1
 19a:	0e 94 c8 02 	call	0x590	; 0x590 <strcmp>
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	89 2b       	or	r24, r25
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <is_AR+0x10>
 1a4:	20 e0       	ldi	r18, 0x00	; 0
}
 1a6:	82 2f       	mov	r24, r18
 1a8:	08 95       	ret

000001aa <delay_ms>:

// Simple delay in ms (blocking, for echo)
void delay_ms(uint16_t ms) {
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	00 d0       	rcall	.+0      	; 0x1b0 <delay_ms+0x6>
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
    while (ms--) {
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	28 f4       	brcc	.+10     	; 0x1c2 <delay_ms+0x18>
        for (volatile uint16_t d = 0; d < (F_CPU / 1000 / 8); d++) { asm volatile ("nop"); }
    }
}
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret
}

// Simple delay in ms (blocking, for echo)
void delay_ms(uint16_t ms) {
    while (ms--) {
        for (volatile uint16_t d = 0; d < (F_CPU / 1000 / 8); d++) { asm volatile ("nop"); }
 1c2:	1a 82       	std	Y+2, r1	; 0x02
 1c4:	19 82       	std	Y+1, r1	; 0x01
 1c6:	29 81       	ldd	r18, Y+1	; 0x01
 1c8:	3a 81       	ldd	r19, Y+2	; 0x02
 1ca:	20 3d       	cpi	r18, 0xD0	; 208
 1cc:	37 40       	sbci	r19, 0x07	; 7
 1ce:	90 f7       	brcc	.-28     	; 0x1b4 <delay_ms+0xa>
 1d0:	00 00       	nop
 1d2:	29 81       	ldd	r18, Y+1	; 0x01
 1d4:	3a 81       	ldd	r19, Y+2	; 0x02
 1d6:	2f 5f       	subi	r18, 0xFF	; 255
 1d8:	3f 4f       	sbci	r19, 0xFF	; 255
 1da:	3a 83       	std	Y+2, r19	; 0x02
 1dc:	29 83       	std	Y+1, r18	; 0x01
 1de:	f3 cf       	rjmp	.-26     	; 0x1c6 <delay_ms+0x1c>

000001e0 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 1e0:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	8a 95       	dec	r24
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <toggle_e+0x4>
 1e8:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
 1ea:	42 98       	cbi	0x08, 2	; 8
}
 1ec:	08 95       	ret

000001ee <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 1ee:	cf 93       	push	r28
 1f0:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
 1f2:	66 23       	and	r22, r22
 1f4:	41 f1       	breq	.+80     	; 0x246 <lcd_write+0x58>
       lcd_rs_high();
 1f6:	40 9a       	sbi	0x08, 0	; 8
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
    }
    lcd_rw_low();    /* RW=0  write mode      */
 1f8:	41 98       	cbi	0x08, 1	; 8
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1fa:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1fc:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1fe:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 200:	55 9a       	sbi	0x0a, 5	; 10
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 202:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 204:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 206:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 208:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 20a:	c7 fd       	sbrc	r28, 7
 20c:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 20e:	c6 fd       	sbrc	r28, 6
 210:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 212:	c5 fd       	sbrc	r28, 5
 214:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 216:	c4 fd       	sbrc	r28, 4
 218:	5a 9a       	sbi	0x0b, 2	; 11
        lcd_e_toggle();
 21a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 21e:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 220:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 222:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 224:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 226:	c3 fd       	sbrc	r28, 3
 228:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 22a:	c2 fd       	sbrc	r28, 2
 22c:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 22e:	c1 fd       	sbrc	r28, 1
 230:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 232:	c0 fd       	sbrc	r28, 0
 234:	5a 9a       	sbi	0x0b, 2	; 11
        lcd_e_toggle();        
 236:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 23a:	5a 9a       	sbi	0x0b, 2	; 11
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 23c:	5b 9a       	sbi	0x0b, 3	; 11
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 23e:	5c 9a       	sbi	0x0b, 4	; 11
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 240:	5d 9a       	sbi	0x0b, 5	; 11
    }
}
 242:	cf 91       	pop	r28
 244:	08 95       	ret


    if (rs) {        /* write data        (RS=1, RW=0) */
       lcd_rs_high();
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 246:	40 98       	cbi	0x08, 0	; 8
 248:	d7 cf       	rjmp	.-82     	; 0x1f8 <lcd_write+0xa>

0000024a <lcd_read.constprop.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 24a:	40 98       	cbi	0x08, 0	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
 24c:	41 9a       	sbi	0x08, 1	; 8
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 24e:	52 98       	cbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 250:	53 98       	cbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 252:	54 98       	cbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 254:	55 98       	cbi	0x0a, 5	; 10
                
        /* read high nibble first */
        lcd_e_high();
 256:	42 9a       	sbi	0x08, 2	; 8
 258:	85 e0       	ldi	r24, 0x05	; 5
 25a:	8a 95       	dec	r24
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_read.constprop.0+0x10>
 25e:	00 00       	nop
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 260:	4a 9b       	sbis	0x09, 2	; 9
 262:	1b c0       	rjmp	.+54     	; 0x29a <lcd_read.constprop.0+0x50>
 264:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 266:	4b 99       	sbic	0x09, 3	; 9
 268:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 26a:	4c 99       	sbic	0x09, 4	; 9
 26c:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 26e:	4d 99       	sbic	0x09, 5	; 9
 270:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 272:	42 98       	cbi	0x08, 2	; 8
 274:	95 e0       	ldi	r25, 0x05	; 5
 276:	9a 95       	dec	r25
 278:	f1 f7       	brne	.-4      	; 0x276 <lcd_read.constprop.0+0x2c>
 27a:	00 00       	nop

        lcd_e_delay();                       /* Enable 500ns low       */
    
        /* read low nibble */    
        lcd_e_high();
 27c:	42 9a       	sbi	0x08, 2	; 8
 27e:	95 e0       	ldi	r25, 0x05	; 5
 280:	9a 95       	dec	r25
 282:	f1 f7       	brne	.-4      	; 0x280 <lcd_read.constprop.0+0x36>
 284:	00 00       	nop
        lcd_e_delay();
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 286:	4a 99       	sbic	0x09, 2	; 9
 288:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 28a:	4b 99       	sbic	0x09, 3	; 9
 28c:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 28e:	4c 99       	sbic	0x09, 4	; 9
 290:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 292:	4d 99       	sbic	0x09, 5	; 9
 294:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 296:	42 98       	cbi	0x08, 2	; 8
    }
    return data;
}
 298:	08 95       	ret
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	e4 cf       	rjmp	.-56     	; 0x266 <lcd_read.constprop.0+0x1c>

0000029e <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 29e:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_read.constprop.0>
 2a2:	87 fd       	sbrc	r24, 7
 2a4:	fc cf       	rjmp	.-8      	; 0x29e <lcd_waitbusy>
 2a6:	85 e1       	ldi	r24, 0x15	; 21
 2a8:	8a 95       	dec	r24
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_waitbusy+0xa>
 2ac:	00 00       	nop
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 2ae:	0c 94 25 01 	jmp	0x24a	; 0x24a <lcd_read.constprop.0>

000002b2 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 2b2:	cf 93       	push	r28
 2b4:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 2b6:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_waitbusy>
    lcd_write(cmd,0);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	8c 2f       	mov	r24, r28
}
 2be:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
 2c0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <lcd_write>

000002c4 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 2c4:	cf 93       	push	r28
 2c6:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 2c8:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_waitbusy>
    lcd_write(data,1);
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	8c 2f       	mov	r24, r28
}
 2d0:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
 2d2:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <lcd_write>

000002d6 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 2d6:	61 11       	cpse	r22, r1
 2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <lcd_gotoxy+0xa>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 2da:	80 58       	subi	r24, 0x80	; 128
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 2dc:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <lcd_command>
 2e0:	80 54       	subi	r24, 0x40	; 64
 2e2:	fc cf       	rjmp	.-8      	; 0x2dc <lcd_gotoxy+0x6>

000002e4 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 2e4:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_waitbusy>
}
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	08 95       	ret

000002ec <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <lcd_command>

000002f2 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <lcd_command>

000002f8 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 2f8:	cf 93       	push	r28
 2fa:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 2fc:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_waitbusy>
    if (c=='\n')
 300:	ca 30       	cpi	r28, 0x0A	; 10
 302:	49 f4       	brne	.+18     	; 0x316 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 304:	80 34       	cpi	r24, 0x40	; 64
 306:	28 f0       	brcs	.+10     	; 0x312 <lcd_putc+0x1a>
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
 308:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 30a:	80 58       	subi	r24, 0x80	; 128
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
 30c:	cf 91       	pop	r28
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 30e:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <lcd_command>
#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
 312:	80 e4       	ldi	r24, 0x40	; 64
 314:	fa cf       	rjmp	.-12     	; 0x30a <lcd_putc+0x12>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	8c 2f       	mov	r24, r28
    }

}/* lcd_putc */
 31a:	cf 91       	pop	r28
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 31c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <lcd_write>

00000320 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 326:	89 91       	ld	r24, Y+
 328:	81 11       	cpse	r24, r1
 32a:	03 c0       	rjmp	.+6      	; 0x332 <lcd_puts+0x12>
        lcd_putc(c);
    }

}/* lcd_puts */
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 332:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_putc>
 336:	f7 cf       	rjmp	.-18     	; 0x326 <lcd_puts+0x6>

00000338 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 33e:	fe 01       	movw	r30, r28
 340:	84 91       	lpm	r24, Z
 342:	21 96       	adiw	r28, 0x01	; 1
 344:	81 11       	cpse	r24, r1
 346:	03 c0       	rjmp	.+6      	; 0x34e <lcd_puts_p+0x16>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 34e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_putc>
 352:	f5 cf       	rjmp	.-22     	; 0x33e <lcd_puts_p+0x6>

00000354 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 354:	cf 93       	push	r28
 356:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 358:	38 9a       	sbi	0x07, 0	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 35a:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 35c:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 35e:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 360:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 362:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 364:	55 9a       	sbi	0x0a, 5	; 10
 366:	8f ef       	ldi	r24, 0xFF	; 255
 368:	99 ef       	ldi	r25, 0xF9	; 249
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <lcd_init+0x16>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <lcd_init+0x1c>
 370:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 372:	5b 9a       	sbi	0x0b, 3	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 374:	5a 9a       	sbi	0x0b, 2	; 11
    lcd_e_toggle();
 376:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <toggle_e>
 37a:	8f e1       	ldi	r24, 0x1F	; 31
 37c:	9e e4       	ldi	r25, 0x4E	; 78
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <lcd_init+0x2a>
 382:	00 c0       	rjmp	.+0      	; 0x384 <lcd_init+0x30>
 384:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 386:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <toggle_e>
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <lcd_init+0x3a>
 392:	00 c0       	rjmp	.+0      	; 0x394 <lcd_init+0x40>
 394:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 396:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <toggle_e>
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <lcd_init+0x4a>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <lcd_init+0x50>
 3a4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 3a6:	5a 98       	cbi	0x0b, 2	; 11
    lcd_e_toggle();
 3a8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <toggle_e>
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <lcd_init+0x5c>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <lcd_init+0x62>
 3b6:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 3b8:	88 e2       	ldi	r24, 0x28	; 40
 3ba:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 3be:	88 e0       	ldi	r24, 0x08	; 8
 3c0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 3c4:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 3c8:	86 e0       	ldi	r24, 0x06	; 6
 3ca:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 3ce:	8c 2f       	mov	r24, r28

}/* lcd_init */
 3d0:	cf 91       	pop	r28
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    lcd_clrscr();                           /* display clear                */ 
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */
 3d2:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <lcd_command>

000003d6 <main>:
    }
}

int main(void) {
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	aa 97       	sbiw	r28, 0x2a	; 42
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	f8 94       	cli
 3e4:	de bf       	out	0x3e, r29	; 62
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	cd bf       	out	0x3d, r28	; 61
    // Set LED and buzzer pins as output
    LED_DDR |= (1 << LED_PIN);
 3ea:	25 9a       	sbi	0x04, 5	; 4
    BUZZER_DDR |= (1 << BUZZER_PIN);
 3ec:	21 9a       	sbi	0x04, 1	; 4
    // Set button as input with pull-up
    BUTTON_DDR &= ~(1 << BUTTON_PIN);
 3ee:	57 98       	cbi	0x0a, 7	; 10
    BUTTON_PORT |= (1 << BUTTON_PIN);
 3f0:	5f 9a       	sbi	0x0b, 7	; 11

    // Initialize LCD
    lcd_init(LCD_DISP_ON);
 3f2:	8c e0       	ldi	r24, 0x0C	; 12
 3f4:	0e 94 aa 01 	call	0x354	; 0x354 <lcd_init>
    lcd_clrscr();
 3f8:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_clrscr>
    lcd_gotoxy(0,0);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_gotoxy>
    lcd_puts("Morse Decoder");
 404:	8d eb       	ldi	r24, 0xBD	; 189
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	0e 94 90 01 	call	0x320	; 0x320 <lcd_puts>

    char morse_buf[MAX_MORSE_LEN+1] = {0};
 40c:	6e 01       	movw	r12, r28
 40e:	22 e2       	ldi	r18, 0x22	; 34
 410:	c2 0e       	add	r12, r18
 412:	d1 1c       	adc	r13, r1
 414:	89 e0       	ldi	r24, 0x09	; 9
 416:	f6 01       	movw	r30, r12
 418:	11 92       	st	Z+, r1
 41a:	8a 95       	dec	r24
 41c:	e9 f7       	brne	.-6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
    char msg_buf[MAX_MSG_LEN+1] = {0};
 41e:	ce 01       	movw	r24, r28
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	7c 01       	movw	r14, r24
 424:	81 e2       	ldi	r24, 0x21	; 33
 426:	f7 01       	movw	r30, r14
 428:	11 92       	st	Z+, r1
 42a:	8a 95       	dec	r24
 42c:	e9 f7       	brne	.-6      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
    uint8_t morse_idx = 0, msg_idx = 0;
    uint8_t last_btn = 1, btn;
 42e:	81 e0       	ldi	r24, 0x01	; 1
    lcd_gotoxy(0,0);
    lcd_puts("Morse Decoder");

    char morse_buf[MAX_MORSE_LEN+1] = {0};
    char msg_buf[MAX_MSG_LEN+1] = {0};
    uint8_t morse_idx = 0, msg_idx = 0;
 430:	10 e0       	ldi	r17, 0x00	; 0
 432:	00 e0       	ldi	r16, 0x00	; 0
                    char decoded = decode_morse(morse_buf);
                    msg_buf[msg_idx++] = decoded;
                    morse_idx = 0;
                    morse_buf[0] = '\0';
                }
                msg_buf[msg_idx++] = ' ';
 434:	90 e2       	ldi	r25, 0x20	; 32
 436:	89 2e       	mov	r8, r25

            // Dot or dash
            if (press_time < DOT_THRESH) {
                morse_buf[morse_idx++] = '.';
            } else {
                morse_buf[morse_idx++] = '-';
 438:	2d e2       	ldi	r18, 0x2D	; 45
 43a:	32 2e       	mov	r3, r18
            LED_PORT &= ~(1 << LED_PIN);
            BUZZER_PORT &= ~(1 << BUZZER_PIN);

            // Dot or dash
            if (press_time < DOT_THRESH) {
                morse_buf[morse_idx++] = '.';
 43c:	3e e2       	ldi	r19, 0x2E	; 46
 43e:	23 2e       	mov	r2, r19
    const uint16_t LETTER_GAP = 600;      // >=600ms = letter gap
    const uint16_t WORD_GAP = 1400;       // >=1400ms = word gap

    // Main loop
    while (1) {
        btn = (BUTTON_PINREG & (1 << BUTTON_PIN)) ? 1 : 0;
 440:	99 b1       	in	r25, 0x09	; 9
 442:	99 2e       	mov	r9, r25
 444:	99 1c       	adc	r9, r9
 446:	99 24       	eor	r9, r9
 448:	99 1c       	adc	r9, r9
        if (!btn && last_btn) { // Button pressed
 44a:	97 fd       	sbrc	r25, 7
 44c:	25 c0       	rjmp	.+74     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 44e:	88 23       	and	r24, r24
 450:	b9 f0       	breq	.+46     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
            // Echo LED/buzzer
            LED_PORT |= (1 << LED_PIN);
 452:	2d 9a       	sbi	0x05, 5	; 5
            BUZZER_PORT |= (1 << BUZZER_PIN);
 454:	29 9a       	sbi	0x05, 1	; 5
            // Wait for release and measure duration
            uint16_t t = 0;
 456:	b1 2c       	mov	r11, r1
 458:	a1 2c       	mov	r10, r1
            while (!(BUTTON_PINREG & (1 << BUTTON_PIN))) {
 45a:	4f 9b       	sbis	0x09, 7	; 9
 45c:	13 c0       	rjmp	.+38     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
                delay_ms(1);
                t++;
            }
            press_time = t;
            // End echo
            LED_PORT &= ~(1 << LED_PIN);
 45e:	2d 98       	cbi	0x05, 5	; 5
            BUZZER_PORT &= ~(1 << BUZZER_PIN);
 460:	29 98       	cbi	0x05, 1	; 5
 462:	80 2f       	mov	r24, r16
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0f 5f       	subi	r16, 0xFF	; 255

            // Dot or dash
            if (press_time < DOT_THRESH) {
                morse_buf[morse_idx++] = '.';
 468:	8c 0d       	add	r24, r12
 46a:	9d 1d       	adc	r25, r13
 46c:	fc 01       	movw	r30, r24
            // End echo
            LED_PORT &= ~(1 << LED_PIN);
            BUZZER_PORT &= ~(1 << BUZZER_PIN);

            // Dot or dash
            if (press_time < DOT_THRESH) {
 46e:	28 ec       	ldi	r18, 0xC8	; 200
 470:	a2 16       	cp	r10, r18
 472:	b1 04       	cpc	r11, r1
 474:	78 f4       	brcc	.+30     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
                morse_buf[morse_idx++] = '.';
 476:	20 82       	st	Z, r2
            } else {
                morse_buf[morse_idx++] = '-';
            }
            morse_buf[morse_idx] = '\0';
 478:	f6 01       	movw	r30, r12
 47a:	e0 0f       	add	r30, r16
 47c:	f1 1d       	adc	r31, r1
 47e:	10 82       	st	Z, r1
                lcd_clrscr();
                lcd_gotoxy(0,0);
                lcd_puts("Decoded:");
                lcd_gotoxy(1,0);
                lcd_puts(msg_buf);
                morse_idx = 0; msg_idx = 0;
 480:	89 2d       	mov	r24, r9
 482:	de cf       	rjmp	.-68     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
            LED_PORT |= (1 << LED_PIN);
            BUZZER_PORT |= (1 << BUZZER_PIN);
            // Wait for release and measure duration
            uint16_t t = 0;
            while (!(BUTTON_PINREG & (1 << BUTTON_PIN))) {
                delay_ms(1);
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 d5 00 	call	0x1aa	; 0x1aa <delay_ms>
                t++;
 48c:	ff ef       	ldi	r31, 0xFF	; 255
 48e:	af 1a       	sub	r10, r31
 490:	bf 0a       	sbc	r11, r31
 492:	e3 cf       	rjmp	.-58     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>

            // Dot or dash
            if (press_time < DOT_THRESH) {
                morse_buf[morse_idx++] = '.';
            } else {
                morse_buf[morse_idx++] = '-';
 494:	30 82       	st	Z, r3
 496:	f0 cf       	rjmp	.-32     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
            }
            morse_buf[morse_idx] = '\0';
            gap_time = 0;
        } else if (btn && !last_btn) { // Button released
 498:	81 11       	cpse	r24, r1
 49a:	f2 cf       	rjmp	.-28     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
            // Start gap timing
            gap_time = 0;
 49c:	41 2c       	mov	r4, r1
 49e:	51 2c       	mov	r5, r1
 4a0:	32 01       	movw	r6, r4
            while ((BUTTON_PINREG & (1 << BUTTON_PIN)) && gap_time < WORD_GAP) {
 4a2:	4f 9b       	sbis	0x09, 7	; 9
 4a4:	49 c0       	rjmp	.+146    	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 4a6:	28 e7       	ldi	r18, 0x78	; 120
 4a8:	42 16       	cp	r4, r18
 4aa:	25 e0       	ldi	r18, 0x05	; 5
 4ac:	52 06       	cpc	r5, r18
 4ae:	61 04       	cpc	r6, r1
 4b0:	71 04       	cpc	r7, r1
 4b2:	b9 f5       	brne	.+110    	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
                gap_time++;
                if (!(BUTTON_PINREG & (1 << BUTTON_PIN))) break;
            }
            // If gap is long enough, treat as letter/word
            if (gap_time >= WORD_GAP) {
                if (morse_idx > 0) {
 4b4:	01 11       	cpse	r16, r1
 4b6:	60 c0       	rjmp	.+192    	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
                    char decoded = decode_morse(morse_buf);
                    msg_buf[msg_idx++] = decoded;
                    morse_idx = 0;
                    morse_buf[0] = '\0';
                }
                msg_buf[msg_idx++] = ' ';
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	81 0f       	add	r24, r17
 4bc:	f7 01       	movw	r30, r14
 4be:	e1 0f       	add	r30, r17
 4c0:	f1 1d       	adc	r31, r1
 4c2:	80 82       	st	Z, r8
                msg_buf[msg_idx] = '\0';
 4c4:	f7 01       	movw	r30, r14
 4c6:	e8 0f       	add	r30, r24
 4c8:	f1 1d       	adc	r31, r1
 4ca:	10 82       	st	Z, r1
                    char decoded = decode_morse(morse_buf);
                    msg_buf[msg_idx++] = decoded;
                    morse_idx = 0;
                    morse_buf[0] = '\0';
                }
                msg_buf[msg_idx++] = ' ';
 4cc:	18 2f       	mov	r17, r24
                    char decoded = decode_morse(morse_buf);
                    msg_buf[msg_idx++] = decoded;
                    morse_idx = 0;
                    morse_buf[0] = '\0';
                }
                msg_buf[msg_idx] = '\0';
 4ce:	00 e0       	ldi	r16, 0x00	; 0
            }
            // Check for AR (.-.-.)
            if (is_AR(morse_buf)) {
 4d0:	c6 01       	movw	r24, r12
 4d2:	0e 94 cb 00 	call	0x196	; 0x196 <is_AR>
 4d6:	88 23       	and	r24, r24
 4d8:	99 f2       	breq	.-90     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
                lcd_clrscr();
 4da:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_clrscr>
                lcd_gotoxy(0,0);
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_gotoxy>
                lcd_puts("Decoded:");
 4e6:	8b ec       	ldi	r24, 0xCB	; 203
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	0e 94 90 01 	call	0x320	; 0x320 <lcd_puts>
                lcd_gotoxy(1,0);
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_gotoxy>
                lcd_puts(msg_buf);
 4f6:	c7 01       	movw	r24, r14
 4f8:	0e 94 90 01 	call	0x320	; 0x320 <lcd_puts>
                morse_idx = 0; msg_idx = 0;
                morse_buf[0] = '\0'; msg_buf[0] = '\0';
 4fc:	1a a2       	std	Y+34, r1	; 0x22
 4fe:	19 82       	std	Y+1, r1	; 0x01
                delay_ms(2000);
 500:	80 ed       	ldi	r24, 0xD0	; 208
 502:	97 e0       	ldi	r25, 0x07	; 7
 504:	0e 94 d5 00 	call	0x1aa	; 0x1aa <delay_ms>
                lcd_clrscr();
 508:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_clrscr>
                lcd_gotoxy(0,0);
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_gotoxy>
                lcd_puts("Morse Decoder");
 514:	8d eb       	ldi	r24, 0xBD	; 189
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	0e 94 90 01 	call	0x320	; 0x320 <lcd_puts>
                lcd_clrscr();
                lcd_gotoxy(0,0);
                lcd_puts("Decoded:");
                lcd_gotoxy(1,0);
                lcd_puts(msg_buf);
                morse_idx = 0; msg_idx = 0;
 51c:	10 e0       	ldi	r17, 0x00	; 0
 51e:	00 e0       	ldi	r16, 0x00	; 0
 520:	af cf       	rjmp	.-162    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
            gap_time = 0;
        } else if (btn && !last_btn) { // Button released
            // Start gap timing
            gap_time = 0;
            while ((BUTTON_PINREG & (1 << BUTTON_PIN)) && gap_time < WORD_GAP) {
                delay_ms(1);
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 d5 00 	call	0x1aa	; 0x1aa <delay_ms>
                gap_time++;
 52a:	ff ef       	ldi	r31, 0xFF	; 255
 52c:	4f 1a       	sub	r4, r31
 52e:	5f 0a       	sbc	r5, r31
 530:	6f 0a       	sbc	r6, r31
 532:	7f 0a       	sbc	r7, r31
                if (!(BUTTON_PINREG & (1 << BUTTON_PIN))) break;
 534:	4f 99       	sbic	0x09, 7	; 9
 536:	b5 cf       	rjmp	.-150    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
            }
            // If gap is long enough, treat as letter/word
            if (gap_time >= WORD_GAP) {
 538:	88 e7       	ldi	r24, 0x78	; 120
 53a:	48 16       	cp	r4, r24
 53c:	85 e0       	ldi	r24, 0x05	; 5
 53e:	58 06       	cpc	r5, r24
 540:	61 04       	cpc	r6, r1
 542:	71 04       	cpc	r7, r1
 544:	09 f4       	brne	.+2      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 546:	b6 cf       	rjmp	.-148    	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
                    morse_idx = 0;
                    morse_buf[0] = '\0';
                }
                msg_buf[msg_idx++] = ' ';
                msg_buf[msg_idx] = '\0';
            } else if (gap_time >= LETTER_GAP) {
 548:	98 e5       	ldi	r25, 0x58	; 88
 54a:	49 16       	cp	r4, r25
 54c:	92 e0       	ldi	r25, 0x02	; 2
 54e:	59 06       	cpc	r5, r25
 550:	61 04       	cpc	r6, r1
 552:	71 04       	cpc	r7, r1
 554:	08 f4       	brcc	.+2      	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
 556:	bc cf       	rjmp	.-136    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
                if (morse_idx > 0) {
 558:	00 23       	and	r16, r16
 55a:	49 f0       	breq	.+18     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
                    char decoded = decode_morse(morse_buf);
 55c:	c6 01       	movw	r24, r12
 55e:	0e 94 a1 00 	call	0x142	; 0x142 <decode_morse>
                    msg_buf[msg_idx++] = decoded;
 562:	f7 01       	movw	r30, r14
 564:	e1 0f       	add	r30, r17
 566:	f1 1d       	adc	r31, r1
 568:	80 83       	st	Z, r24
                    morse_idx = 0;
                    morse_buf[0] = '\0';
 56a:	1a a2       	std	Y+34, r1	; 0x22
                msg_buf[msg_idx++] = ' ';
                msg_buf[msg_idx] = '\0';
            } else if (gap_time >= LETTER_GAP) {
                if (morse_idx > 0) {
                    char decoded = decode_morse(morse_buf);
                    msg_buf[msg_idx++] = decoded;
 56c:	1f 5f       	subi	r17, 0xFF	; 255
                    morse_idx = 0;
                    morse_buf[0] = '\0';
                }
                msg_buf[msg_idx] = '\0';
 56e:	f7 01       	movw	r30, r14
 570:	e1 0f       	add	r30, r17
 572:	f1 1d       	adc	r31, r1
 574:	10 82       	st	Z, r1
 576:	ab cf       	rjmp	.-170    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 578:	01 e0       	ldi	r16, 0x01	; 1
 57a:	01 0f       	add	r16, r17
                if (!(BUTTON_PINREG & (1 << BUTTON_PIN))) break;
            }
            // If gap is long enough, treat as letter/word
            if (gap_time >= WORD_GAP) {
                if (morse_idx > 0) {
                    char decoded = decode_morse(morse_buf);
 57c:	c6 01       	movw	r24, r12
 57e:	0e 94 a1 00 	call	0x142	; 0x142 <decode_morse>
                    msg_buf[msg_idx++] = decoded;
 582:	f7 01       	movw	r30, r14
 584:	e1 0f       	add	r30, r17
 586:	f1 1d       	adc	r31, r1
 588:	80 83       	st	Z, r24
                    morse_idx = 0;
                    morse_buf[0] = '\0';
 58a:	1a a2       	std	Y+34, r1	; 0x22
            }
            // If gap is long enough, treat as letter/word
            if (gap_time >= WORD_GAP) {
                if (morse_idx > 0) {
                    char decoded = decode_morse(morse_buf);
                    msg_buf[msg_idx++] = decoded;
 58c:	10 2f       	mov	r17, r16
 58e:	94 cf       	rjmp	.-216    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>

00000590 <strcmp>:
 590:	fb 01       	movw	r30, r22
 592:	dc 01       	movw	r26, r24
 594:	8d 91       	ld	r24, X+
 596:	01 90       	ld	r0, Z+
 598:	80 19       	sub	r24, r0
 59a:	01 10       	cpse	r0, r1
 59c:	d9 f3       	breq	.-10     	; 0x594 <strcmp+0x4>
 59e:	99 0b       	sbc	r25, r25
 5a0:	08 95       	ret

000005a2 <_exit>:
 5a2:	f8 94       	cli

000005a4 <__stop_program>:
 5a4:	ff cf       	rjmp	.-2      	; 0x5a4 <__stop_program>
