
Lab7_Ex3_G09.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00000616  0000068a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000616  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014b9  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aa3  00000000  00000000  00001c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c2  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f4  00000000  00000000  00002eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050f  00000000  00000000  000030a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b83  00000000  00000000  000035b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000413a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 36       	cpi	r26, 0x6E	; 110
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 1b 02 	call	0x436	; 0x436 <main>
  8e:	0c 94 09 03 	jmp	0x612	; 0x612 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <EEPROMwrite>:
// There is no return value for this function

void EEPROMwrite(unsigned int address, char data)
{
    // Wait until the EEPROM is ready for a new write operation
    while (EECR & (1 << EEPE));
  96:	f9 99       	sbic	0x1f, 1	; 31
  98:	fe cf       	rjmp	.-4      	; 0x96 <EEPROMwrite>

    // Set the EEPROM address
    EEARL = address;
  9a:	81 bd       	out	0x21, r24	; 33
    EEARH = address >> 8;
  9c:	92 bd       	out	0x22, r25	; 34

    // Set the data to be written
    EEDR = data;
  9e:	60 bd       	out	0x20, r22	; 32

    // Writing logic 1 to EEMPE while EEPE is 0
    EECR |= (1 << EEMPE);
  a0:	fa 9a       	sbi	0x1f, 2	; 31

    // Within four clock cycles, write logic 1 to EEPE to start the write operation
    // We can start immediately after setting EEMPE
    EECR |= (1 << EEPE);
  a2:	f9 9a       	sbi	0x1f, 1	; 31
}
  a4:	08 95       	ret

000000a6 <EEPROMread>:
//      which is a character

char EEPROMread(unsigned int address)
{
    // Wait until the EEPROM is ready for a new write operation
    while (EECR & (1 << EEPE));
  a6:	f9 99       	sbic	0x1f, 1	; 31
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <EEPROMread>

    // Set the EEPROM address
    EEARL = address;
  aa:	81 bd       	out	0x21, r24	; 33
    EEARH = address >> 8;
  ac:	92 bd       	out	0x22, r25	; 34

    // Start the read operation by writing logic 1 to EERE
    EECR |= (1 << EERE);
  ae:	f8 9a       	sbi	0x1f, 0	; 31

    // Return the data read from the EEPROM
    return EEDR;
  b0:	80 b5       	in	r24, 0x20	; 32
}
  b2:	08 95       	ret

000000b4 <caesar_cipher>:
*/

char caesar_cipher(char ch, uint8_t shift)
{
    // If the character is an uppercase letter
    if (ch >= 'A' && ch <= 'Z')
  b4:	9f eb       	ldi	r25, 0xBF	; 191
  b6:	98 0f       	add	r25, r24
  b8:	9a 31       	cpi	r25, 0x1A	; 26
  ba:	50 f4       	brcc	.+20     	; 0xd0 <caesar_cipher+0x1c>
    {
        // Shift the character by the specified positions
        ch = ((ch - 'A' + shift) % 26) + 'A';
  bc:	81 54       	subi	r24, 0x41	; 65
  be:	99 0b       	sbc	r25, r25
  c0:	86 0f       	add	r24, r22
  c2:	91 1d       	adc	r25, r1
  c4:	6a e1       	ldi	r22, 0x1A	; 26
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__divmodhi4>
  cc:	8f 5b       	subi	r24, 0xBF	; 191
        return ch;
  ce:	08 95       	ret
    }

    // If the character is a lowercase letter
    else if (ch >= 'a' && ch <= 'z')
  d0:	9f e9       	ldi	r25, 0x9F	; 159
  d2:	98 0f       	add	r25, r24
  d4:	9a 31       	cpi	r25, 0x1A	; 26
  d6:	48 f4       	brcc	.+18     	; 0xea <caesar_cipher+0x36>
    {
        // Shift the character by the specified positions
        ch = ((ch - 'a' + shift) % 26) + 'a';
  d8:	81 56       	subi	r24, 0x61	; 97
  da:	99 0b       	sbc	r25, r25
  dc:	86 0f       	add	r24, r22
  de:	91 1d       	adc	r25, r1
  e0:	6a e1       	ldi	r22, 0x1A	; 26
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__divmodhi4>
  e8:	8f 59       	subi	r24, 0x9F	; 159
    else
    {
        // Non-alphabetic characters remain unchanged
        return ch;
    }
}
  ea:	08 95       	ret

000000ec <keypad_init>:
    When a key is pressed, it pulls the corresponding column low, allowing detection of the key.
*/
void keypad_init(void) 
{
    // Set respective row ports as outputs
    ROW1_DDR |= (1 << ROW1_PIN);
  ec:	57 9a       	sbi	0x0a, 7	; 10
    ROW2_DDR |= (1 << ROW2_PIN);
  ee:	56 9a       	sbi	0x0a, 6	; 10
    ROW3_DDR |= (1 << ROW3_PIN);
  f0:	20 9a       	sbi	0x04, 0	; 4
    ROW4_DDR |= (1 << ROW4_PIN);
  f2:	21 9a       	sbi	0x04, 1	; 4

    // Set columns as inputs
    DDRB &= ~((1 << COL1_PIN) | (1 << COL2_PIN) | (1 << COL3_PIN) | (1 << COL4_PIN));
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	83 7c       	andi	r24, 0xC3	; 195
  f8:	84 b9       	out	0x04, r24	; 4

    // Enable pull-up resistors on column pins
    PORTB |= (1 << COL1_PIN) | (1 << COL2_PIN) | (1 << COL3_PIN) | (1 << COL4_PIN);
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	8c 63       	ori	r24, 0x3C	; 60
  fe:	85 b9       	out	0x05, r24	; 5
}
 100:	08 95       	ret

00000102 <keypad_getkey>:
    and checking the state of the columns. If a column reads low, it means a key in that row
    and column is pressed, and we return the corresponding character from the keymap.
*/

char keypad_getkey(void) 
{
 102:	cf 92       	push	r12
 104:	df 92       	push	r13
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	2c 97       	sbiw	r28, 0x0c	; 12
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
    The row_ports array holds the addresses of the PORT registers for each row,
    and the row_pins array holds the pin numbers for each row.  

    */

    volatile uint8_t* row_ports[4] = {&ROW2_PORT, &ROW1_PORT, &ROW3_PORT, &ROW4_PORT};
 122:	88 e0       	ldi	r24, 0x08	; 8
 124:	e0 e0       	ldi	r30, 0x00	; 0
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	de 01       	movw	r26, r28
 12a:	11 96       	adiw	r26, 0x01	; 1
 12c:	01 90       	ld	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	8a 95       	dec	r24
 132:	e1 f7       	brne	.-8      	; 0x12c <keypad_getkey+0x2a>
    uint8_t row_pins[4] = {ROW2_PIN, ROW1_PIN, ROW3_PIN, ROW4_PIN};
 134:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 138:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 13c:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
 140:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
 144:	89 87       	std	Y+9, r24	; 0x09
 146:	9a 87       	std	Y+10, r25	; 0x0a
 148:	ab 87       	std	Y+11, r26	; 0x0b
 14a:	bc 87       	std	Y+12, r27	; 0x0c
 14c:	ae 01       	movw	r20, r28
 14e:	4f 5f       	subi	r20, 0xFF	; 255
 150:	5f 4f       	sbci	r21, 0xFF	; 255
 152:	6a 01       	movw	r12, r20
 154:	de 01       	movw	r26, r28
 156:	19 96       	adiw	r26, 0x09	; 9
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	80 e0       	ldi	r24, 0x00	; 0
        ROW2_PORT |= (1 << ROW2_PIN);
        ROW3_PORT |= (1 << ROW3_PIN);
        ROW4_PORT |= (1 << ROW4_PIN);

        // Set current row LOW
        *(row_ports[row]) &= ~(1 << row_pins[row]);
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	70 e0       	ldi	r23, 0x00	; 0
    // We will use a delay to allow the row to stabilize before reading the columns

    for (uint8_t row = 0; row < 4; row++) 
    {
        // Set all rows HIGH first
        ROW1_PORT |= (1 << ROW1_PIN);
 160:	5f 9a       	sbi	0x0b, 7	; 11
        ROW2_PORT |= (1 << ROW2_PIN);
 162:	5e 9a       	sbi	0x0b, 6	; 11
        ROW3_PORT |= (1 << ROW3_PIN);
 164:	28 9a       	sbi	0x05, 0	; 5
        ROW4_PORT |= (1 << ROW4_PIN);
 166:	29 9a       	sbi	0x05, 1	; 5

        // Set current row LOW
        *(row_ports[row]) &= ~(1 << row_pins[row]);
 168:	f6 01       	movw	r30, r12
 16a:	41 91       	ld	r20, Z+
 16c:	51 91       	ld	r21, Z+
 16e:	6f 01       	movw	r12, r30
 170:	fa 01       	movw	r30, r20
 172:	10 81       	ld	r17, Z
 174:	2d 91       	ld	r18, X+
 176:	fb 01       	movw	r30, r22
 178:	02 c0       	rjmp	.+4      	; 0x17e <keypad_getkey+0x7c>
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	2a 95       	dec	r18
 180:	e2 f7       	brpl	.-8      	; 0x17a <keypad_getkey+0x78>
 182:	9f 01       	movw	r18, r30
 184:	20 95       	com	r18
 186:	21 23       	and	r18, r17
 188:	fa 01       	movw	r30, r20
 18a:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	fa e1       	ldi	r31, 0x1A	; 26
 18e:	fa 95       	dec	r31
 190:	f1 f7       	brne	.-4      	; 0x18e <keypad_getkey+0x8c>
 192:	00 c0       	rjmp	.+0      	; 0x194 <keypad_getkey+0x92>

        // Read columns
        // col_val will hold the state of the columns
        // We will read the state of the columns using PINB register
        // Using mask 0b00111100 to read only the relevant bits (PB2-PB5)
        uint8_t col_val = PINB & 0b00111100; // PB2-PB5
 194:	43 b1       	in	r20, 0x03	; 3
 196:	4c 73       	andi	r20, 0x3C	; 60
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	20 e0       	ldi	r18, 0x00	; 0
        // Now we write a loop to check each column
        // If a column reads low, it means a key in that row and column is pressed
        for (uint8_t col = 0; col < 4; col++) 
        {   
            // Check if the column is low
            if (!(col_val & (1 << (COL1_PIN + col)))) 
 19c:	50 e0       	ldi	r21, 0x00	; 0
 19e:	89 01       	movw	r16, r18
 1a0:	0e 5f       	subi	r16, 0xFE	; 254
 1a2:	1f 4f       	sbci	r17, 0xFF	; 255
 1a4:	7a 01       	movw	r14, r20
 1a6:	00 2e       	mov	r0, r16
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <keypad_getkey+0xac>
 1aa:	f5 94       	asr	r15
 1ac:	e7 94       	ror	r14
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <keypad_getkey+0xa8>
 1b2:	e0 fc       	sbrc	r14, 0
 1b4:	38 c0       	rjmp	.+112    	; 0x226 <keypad_getkey+0x124>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	4f ef       	ldi	r20, 0xFF	; 255
 1b8:	59 ef       	ldi	r21, 0xF9	; 249
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	41 50       	subi	r20, 0x01	; 1
 1be:	50 40       	sbci	r21, 0x00	; 0
 1c0:	60 40       	sbci	r22, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <keypad_getkey+0xba>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <keypad_getkey+0xc4>
 1c6:	00 00       	nop
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <keypad_getkey+0xd0>
 1ce:	66 0f       	add	r22, r22
 1d0:	77 1f       	adc	r23, r23
 1d2:	0a 95       	dec	r16
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <keypad_getkey+0xcc>
            {   
                _delay_ms(20); // Debounce after press

                // Wait for key release (simple debounce)
                while (!(PINB & (1 << (COL1_PIN + col))));
 1d6:	43 b1       	in	r20, 0x03	; 3
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	46 23       	and	r20, r22
 1dc:	57 23       	and	r21, r23
 1de:	45 2b       	or	r20, r21
 1e0:	d1 f3       	breq	.-12     	; 0x1d6 <keypad_getkey+0xd4>
 1e2:	ef ef       	ldi	r30, 0xFF	; 255
 1e4:	f0 e7       	ldi	r31, 0x70	; 112
 1e6:	42 e0       	ldi	r20, 0x02	; 2
 1e8:	e1 50       	subi	r30, 0x01	; 1
 1ea:	f0 40       	sbci	r31, 0x00	; 0
 1ec:	40 40       	sbci	r20, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <keypad_getkey+0xe6>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <keypad_getkey+0xf0>
 1f2:	00 00       	nop

                _delay_ms(50); // Debounce delay after release

                // Return the corresponding key from the keymap
                // The row and column indices are used to access the keymap
                return keymap[row][col];
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	84 5f       	subi	r24, 0xF4	; 244
 1fe:	9e 4f       	sbci	r25, 0xFE	; 254
 200:	28 0f       	add	r18, r24
 202:	39 1f       	adc	r19, r25
 204:	f9 01       	movw	r30, r18
 206:	80 81       	ld	r24, Z
            }
        }
    } 
    return 0;
}
 208:	2c 96       	adiw	r28, 0x0c	; 12
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	ff 90       	pop	r15
 21e:	ef 90       	pop	r14
 220:	df 90       	pop	r13
 222:	cf 90       	pop	r12
 224:	08 95       	ret
 226:	2f 5f       	subi	r18, 0xFF	; 255
 228:	3f 4f       	sbci	r19, 0xFF	; 255
        // Using mask 0b00111100 to read only the relevant bits (PB2-PB5)
        uint8_t col_val = PINB & 0b00111100; // PB2-PB5

        // Now we write a loop to check each column
        // If a column reads low, it means a key in that row and column is pressed
        for (uint8_t col = 0; col < 4; col++) 
 22a:	24 30       	cpi	r18, 0x04	; 4
 22c:	31 05       	cpc	r19, r1
 22e:	09 f0       	breq	.+2      	; 0x232 <keypad_getkey+0x130>
 230:	b6 cf       	rjmp	.-148    	; 0x19e <keypad_getkey+0x9c>
 232:	01 96       	adiw	r24, 0x01	; 1
    // Iterate through each row
    // We will set each row low one at a time and check the columns for a key
    // If a key is pressed, we will return the corresponding character from the keymap
    // We will use a delay to allow the row to stabilize before reading the columns

    for (uint8_t row = 0; row < 4; row++) 
 234:	84 30       	cpi	r24, 0x04	; 4
 236:	91 05       	cpc	r25, r1
 238:	09 f0       	breq	.+2      	; 0x23c <keypad_getkey+0x13a>
 23a:	92 cf       	rjmp	.-220    	; 0x160 <keypad_getkey+0x5e>
                // The row and column indices are used to access the keymap
                return keymap[row][col];
            }
        }
    } 
    return 0;
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	e4 cf       	rjmp	.-56     	; 0x208 <keypad_getkey+0x106>

00000240 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 240:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	8a 95       	dec	r24
 246:	f1 f7       	brne	.-4      	; 0x244 <toggle_e+0x4>
 248:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
 24a:	42 98       	cbi	0x08, 2	; 8
}
 24c:	08 95       	ret

0000024e <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 24e:	cf 93       	push	r28
 250:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
 252:	66 23       	and	r22, r22
 254:	41 f1       	breq	.+80     	; 0x2a6 <lcd_write+0x58>
       lcd_rs_high();
 256:	40 9a       	sbi	0x08, 0	; 8
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
    }
    lcd_rw_low();    /* RW=0  write mode      */
 258:	41 98       	cbi	0x08, 1	; 8
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 25a:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 25c:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 25e:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 260:	55 9a       	sbi	0x0a, 5	; 10
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 262:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 264:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 266:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 268:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 26a:	c7 fd       	sbrc	r28, 7
 26c:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 26e:	c6 fd       	sbrc	r28, 6
 270:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 272:	c5 fd       	sbrc	r28, 5
 274:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 276:	c4 fd       	sbrc	r28, 4
 278:	5a 9a       	sbi	0x0b, 2	; 11
        lcd_e_toggle();
 27a:	0e 94 20 01 	call	0x240	; 0x240 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 27e:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 280:	5c 98       	cbi	0x0b, 4	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 282:	5b 98       	cbi	0x0b, 3	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 284:	5a 98       	cbi	0x0b, 2	; 11
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 286:	c3 fd       	sbrc	r28, 3
 288:	5d 9a       	sbi	0x0b, 5	; 11
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 28a:	c2 fd       	sbrc	r28, 2
 28c:	5c 9a       	sbi	0x0b, 4	; 11
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 28e:	c1 fd       	sbrc	r28, 1
 290:	5b 9a       	sbi	0x0b, 3	; 11
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 292:	c0 fd       	sbrc	r28, 0
 294:	5a 9a       	sbi	0x0b, 2	; 11
        lcd_e_toggle();        
 296:	0e 94 20 01 	call	0x240	; 0x240 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 29a:	5a 9a       	sbi	0x0b, 2	; 11
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 29c:	5b 9a       	sbi	0x0b, 3	; 11
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 29e:	5c 9a       	sbi	0x0b, 4	; 11
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 2a0:	5d 9a       	sbi	0x0b, 5	; 11
    }
}
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret


    if (rs) {        /* write data        (RS=1, RW=0) */
       lcd_rs_high();
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 2a6:	40 98       	cbi	0x08, 0	; 8
 2a8:	d7 cf       	rjmp	.-82     	; 0x258 <lcd_write+0xa>

000002aa <lcd_read.constprop.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 2aa:	40 98       	cbi	0x08, 0	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
 2ac:	41 9a       	sbi	0x08, 1	; 8
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 2ae:	52 98       	cbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 2b0:	53 98       	cbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 2b2:	54 98       	cbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 2b4:	55 98       	cbi	0x0a, 5	; 10
                
        /* read high nibble first */
        lcd_e_high();
 2b6:	42 9a       	sbi	0x08, 2	; 8
 2b8:	85 e0       	ldi	r24, 0x05	; 5
 2ba:	8a 95       	dec	r24
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_read.constprop.0+0x10>
 2be:	00 00       	nop
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 2c0:	4a 9b       	sbis	0x09, 2	; 9
 2c2:	1b c0       	rjmp	.+54     	; 0x2fa <lcd_read.constprop.0+0x50>
 2c4:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 2c6:	4b 99       	sbic	0x09, 3	; 9
 2c8:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 2ca:	4c 99       	sbic	0x09, 4	; 9
 2cc:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 2ce:	4d 99       	sbic	0x09, 5	; 9
 2d0:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 2d2:	42 98       	cbi	0x08, 2	; 8
 2d4:	95 e0       	ldi	r25, 0x05	; 5
 2d6:	9a 95       	dec	r25
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcd_read.constprop.0+0x2c>
 2da:	00 00       	nop

        lcd_e_delay();                       /* Enable 500ns low       */
    
        /* read low nibble */    
        lcd_e_high();
 2dc:	42 9a       	sbi	0x08, 2	; 8
 2de:	95 e0       	ldi	r25, 0x05	; 5
 2e0:	9a 95       	dec	r25
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <lcd_read.constprop.0+0x36>
 2e4:	00 00       	nop
        lcd_e_delay();
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 2e6:	4a 99       	sbic	0x09, 2	; 9
 2e8:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 2ea:	4b 99       	sbic	0x09, 3	; 9
 2ec:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 2ee:	4c 99       	sbic	0x09, 4	; 9
 2f0:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 2f2:	4d 99       	sbic	0x09, 5	; 9
 2f4:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 2f6:	42 98       	cbi	0x08, 2	; 8
    }
    return data;
}
 2f8:	08 95       	ret
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	e4 cf       	rjmp	.-56     	; 0x2c6 <lcd_read.constprop.0+0x1c>

000002fe <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 2fe:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_read.constprop.0>
 302:	87 fd       	sbrc	r24, 7
 304:	fc cf       	rjmp	.-8      	; 0x2fe <lcd_waitbusy>
 306:	85 e1       	ldi	r24, 0x15	; 21
 308:	8a 95       	dec	r24
 30a:	f1 f7       	brne	.-4      	; 0x308 <lcd_waitbusy+0xa>
 30c:	00 00       	nop
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 30e:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <lcd_read.constprop.0>

00000312 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 312:	cf 93       	push	r28
 314:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 316:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_waitbusy>
    lcd_write(cmd,0);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	8c 2f       	mov	r24, r28
}
 31e:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
 320:	0c 94 27 01 	jmp	0x24e	; 0x24e <lcd_write>

00000324 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 324:	cf 93       	push	r28
 326:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 328:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_waitbusy>
    lcd_write(data,1);
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	8c 2f       	mov	r24, r28
}
 330:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
 332:	0c 94 27 01 	jmp	0x24e	; 0x24e <lcd_write>

00000336 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 336:	61 11       	cpse	r22, r1
 338:	03 c0       	rjmp	.+6      	; 0x340 <lcd_gotoxy+0xa>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 33a:	80 58       	subi	r24, 0x80	; 128
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 33c:	0c 94 89 01 	jmp	0x312	; 0x312 <lcd_command>
 340:	80 54       	subi	r24, 0x40	; 64
 342:	fc cf       	rjmp	.-8      	; 0x33c <lcd_gotoxy+0x6>

00000344 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 344:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_waitbusy>
}
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	08 95       	ret

0000034c <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0c 94 89 01 	jmp	0x312	; 0x312 <lcd_command>

00000352 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0c 94 89 01 	jmp	0x312	; 0x312 <lcd_command>

00000358 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 358:	cf 93       	push	r28
 35a:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 35c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_waitbusy>
    if (c=='\n')
 360:	ca 30       	cpi	r28, 0x0A	; 10
 362:	49 f4       	brne	.+18     	; 0x376 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 364:	80 34       	cpi	r24, 0x40	; 64
 366:	28 f0       	brcs	.+10     	; 0x372 <lcd_putc+0x1a>
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
 368:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 36a:	80 58       	subi	r24, 0x80	; 128
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
 36c:	cf 91       	pop	r28
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 36e:	0c 94 89 01 	jmp	0x312	; 0x312 <lcd_command>
#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
 372:	80 e4       	ldi	r24, 0x40	; 64
 374:	fa cf       	rjmp	.-12     	; 0x36a <lcd_putc+0x12>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	8c 2f       	mov	r24, r28
    }

}/* lcd_putc */
 37a:	cf 91       	pop	r28
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 37c:	0c 94 27 01 	jmp	0x24e	; 0x24e <lcd_write>

00000380 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 386:	89 91       	ld	r24, Y+
 388:	81 11       	cpse	r24, r1
 38a:	03 c0       	rjmp	.+6      	; 0x392 <lcd_puts+0x12>
        lcd_putc(c);
    }

}/* lcd_puts */
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 392:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_putc>
 396:	f7 cf       	rjmp	.-18     	; 0x386 <lcd_puts+0x6>

00000398 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 39e:	fe 01       	movw	r30, r28
 3a0:	84 91       	lpm	r24, Z
 3a2:	21 96       	adiw	r28, 0x01	; 1
 3a4:	81 11       	cpse	r24, r1
 3a6:	03 c0       	rjmp	.+6      	; 0x3ae <lcd_puts_p+0x16>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 3ae:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_putc>
 3b2:	f5 cf       	rjmp	.-22     	; 0x39e <lcd_puts_p+0x6>

000003b4 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 3b4:	cf 93       	push	r28
 3b6:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 3b8:	38 9a       	sbi	0x07, 0	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 3ba:	39 9a       	sbi	0x07, 1	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 3bc:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 3be:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 3c0:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 3c2:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 3c4:	55 9a       	sbi	0x0a, 5	; 10
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	99 ef       	ldi	r25, 0xF9	; 249
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <lcd_init+0x16>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <lcd_init+0x1c>
 3d0:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 3d2:	5b 9a       	sbi	0x0b, 3	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 3d4:	5a 9a       	sbi	0x0b, 2	; 11
    lcd_e_toggle();
 3d6:	0e 94 20 01 	call	0x240	; 0x240 <toggle_e>
 3da:	8f e1       	ldi	r24, 0x1F	; 31
 3dc:	9e e4       	ldi	r25, 0x4E	; 78
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <lcd_init+0x2a>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <lcd_init+0x30>
 3e4:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 3e6:	0e 94 20 01 	call	0x240	; 0x240 <toggle_e>
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <lcd_init+0x3a>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <lcd_init+0x40>
 3f4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 3f6:	0e 94 20 01 	call	0x240	; 0x240 <toggle_e>
 3fa:	8f ef       	ldi	r24, 0xFF	; 255
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <lcd_init+0x4a>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 406:	5a 98       	cbi	0x0b, 2	; 11
    lcd_e_toggle();
 408:	0e 94 20 01 	call	0x240	; 0x240 <toggle_e>
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 416:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 418:	88 e2       	ldi	r24, 0x28	; 40
 41a:	0e 94 89 01 	call	0x312	; 0x312 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 41e:	88 e0       	ldi	r24, 0x08	; 8
 420:	0e 94 89 01 	call	0x312	; 0x312 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 424:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 428:	86 e0       	ldi	r24, 0x06	; 6
 42a:	0e 94 89 01 	call	0x312	; 0x312 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 42e:	8c 2f       	mov	r24, r28

}/* lcd_init */
 430:	cf 91       	pop	r28
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    lcd_clrscr();                           /* display clear                */ 
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */
 432:	0c 94 89 01 	jmp	0x312	; 0x312 <lcd_command>

00000436 <main>:
        - The entered text should be encrypted using the secret key
        - The encrypted text should be displayed on the LCD
*/

int main(void)
{
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
 43e:	66 97       	sbiw	r28, 0x16	; 22
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
    // Initialize the LCD
    lcd_init(LCD_DISP_ON);
 44a:	8c e0       	ldi	r24, 0x0C	; 12
 44c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd_init>

    // Initialize the keypad
    keypad_init();
 450:	0e 94 76 00 	call	0xec	; 0xec <keypad_init>

    // Variable to hold the secret key
    uint8_t secret_key = 3; // Default key for Caesar cipher

    // Variable to hold the input text
    char input_text[11] = {0}; // 10 characters + null terminator
 454:	8b e0       	ldi	r24, 0x0B	; 11
 456:	8e 01       	movw	r16, r28
 458:	04 5f       	subi	r16, 0xF4	; 244
 45a:	1f 4f       	sbci	r17, 0xFF	; 255
 45c:	f8 01       	movw	r30, r16
 45e:	28 2f       	mov	r18, r24
 460:	11 92       	st	Z+, r1
 462:	2a 95       	dec	r18
 464:	e9 f7       	brne	.-6      	; 0x460 <main+0x2a>
    char encrypted_text[11] = {0}; // 10 characters + null terminator
 466:	fe 01       	movw	r30, r28
 468:	31 96       	adiw	r30, 0x01	; 1
 46a:	6f 01       	movw	r12, r30
 46c:	11 92       	st	Z+, r1
 46e:	8a 95       	dec	r24
 470:	e9 f7       	brne	.-6      	; 0x46c <main+0x36>

    // Store the initial secret key in EEPROM
    // At address 0
    EEPROMwrite(0, secret_key);
 472:	63 e0       	ldi	r22, 0x03	; 3
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROMwrite>

    // Main loop
    while (1)
    {
        // Read the secret key from EEPROM
        secret_key = EEPROMread(0);
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROMread>
 484:	e8 2e       	mov	r14, r24

        // Display menu on LCD
        lcd_clrscr();
 486:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_clrscr>
        lcd_gotoxy(0, 0);
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_gotoxy>
        lcd_puts("A:Encrypt B:Key");
 492:	8c e1       	ldi	r24, 0x1C	; 28
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_puts>
        lcd_gotoxy(0, 1);
 49a:	61 e0       	ldi	r22, 0x01	; 1
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_gotoxy>
        lcd_puts("Current Key: ");
 4a2:	8c e2       	ldi	r24, 0x2C	; 44
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_puts>
        lcd_putc(secret_key + '0');
 4aa:	80 e3       	ldi	r24, 0x30	; 48
 4ac:	8e 0d       	add	r24, r14
 4ae:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_putc>

        // Wait for user choice
        do 
        {
            choice = keypad_getkey();
 4b2:	0e 94 81 00 	call	0x102	; 0x102 <keypad_getkey>
        } 
        while (choice != 'A' && choice != 'B');
 4b6:	9f eb       	ldi	r25, 0xBF	; 191
 4b8:	98 0f       	add	r25, r24
 4ba:	92 30       	cpi	r25, 0x02	; 2
 4bc:	d0 f7       	brcc	.-12     	; 0x4b2 <main+0x7c>

        if (choice == 'B') 
 4be:	82 34       	cpi	r24, 0x42	; 66
 4c0:	51 f5       	brne	.+84     	; 0x516 <main+0xe0>
        {
            // Change secret key
            lcd_clrscr();
 4c2:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_clrscr>
            lcd_gotoxy(0, 0);
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_gotoxy>
            lcd_puts("New Key (0-9):");
 4ce:	8a e3       	ldi	r24, 0x3A	; 58
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_puts>

            char key_char = 0;

            do 
            {
                key_char = keypad_getkey();
 4d6:	0e 94 81 00 	call	0x102	; 0x102 <keypad_getkey>
            } 
            while (key_char < '0' || key_char > '9');
 4da:	60 ed       	ldi	r22, 0xD0	; 208
 4dc:	68 0f       	add	r22, r24
 4de:	6a 30       	cpi	r22, 0x0A	; 10
 4e0:	d0 f7       	brcc	.-12     	; 0x4d6 <main+0xa0>

            secret_key = key_char - '0';

            EEPROMwrite(0, secret_key);
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROMwrite>
            lcd_clrscr();
 4ea:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_clrscr>
            lcd_gotoxy(0, 0);
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_gotoxy>
            lcd_puts("Key Updated!");
 4f6:	89 e4       	ldi	r24, 0x49	; 73
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fe:	ff ef       	ldi	r31, 0xFF	; 255
 500:	23 ed       	ldi	r18, 0xD3	; 211
 502:	30 e3       	ldi	r19, 0x30	; 48
 504:	f1 50       	subi	r31, 0x01	; 1
 506:	20 40       	sbci	r18, 0x00	; 0
 508:	30 40       	sbci	r19, 0x00	; 0
 50a:	e1 f7       	brne	.-8      	; 0x504 <main+0xce>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <main+0xd8>
 50e:	00 00       	nop
            lcd_puts(encrypted_text);
            _delay_ms(3000);
        }

        // Clear LCD for next operation
        lcd_clrscr();
 510:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_clrscr>

    // Main loop
    while (1)
    {
        // Read the secret key from EEPROM
        secret_key = EEPROMread(0);
 514:	b3 cf       	rjmp	.-154    	; 0x47c <main+0x46>
        
        else if (choice == 'A') 
        
        {
            // Wait for key release to avoid double reading the menu key
            while (keypad_getkey());
 516:	0e 94 81 00 	call	0x102	; 0x102 <keypad_getkey>
 51a:	81 11       	cpse	r24, r1
 51c:	fc cf       	rjmp	.-8      	; 0x516 <main+0xe0>

            // Encrypt text
            lcd_clrscr();
 51e:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_clrscr>
            lcd_gotoxy(0, 0);
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_gotoxy>
            lcd_puts("Enter Text:");
 52a:	86 e5       	ldi	r24, 0x56	; 86
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_puts>
            lcd_gotoxy(0, 1);
 532:	61 e0       	ldi	r22, 0x01	; 1
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_gotoxy>
 53a:	58 01       	movw	r10, r16

            // Input text from keypad
            // We need the variable index(idx) to keep track of the number of characters entered
            uint8_t idx = 0;
 53c:	f1 2c       	mov	r15, r1
            {   
                // Initialize a character variable to hold the key pressed
                char ch = 0;

                // Wait for a key press
                while (!(ch = keypad_getkey()));
 53e:	0e 94 81 00 	call	0x102	; 0x102 <keypad_getkey>
 542:	88 23       	and	r24, r24
 544:	e1 f3       	breq	.-8      	; 0x53e <main+0x108>

                // If the key is '#', break the loop to finish early
                if (ch == '#') break;
 546:	83 32       	cpi	r24, 0x23	; 35
 548:	49 f0       	breq	.+18     	; 0x55c <main+0x126>

                // Character is added to input_text
                input_text[idx] = ch;
 54a:	f5 01       	movw	r30, r10
 54c:	81 93       	st	Z+, r24
 54e:	5f 01       	movw	r10, r30

                // Display the character on the LCD
                lcd_putc(ch);
 550:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_putc>

                // Increment the index
                idx++;
 554:	f3 94       	inc	r15
            lcd_gotoxy(0, 1);

            // Input text from keypad
            // We need the variable index(idx) to keep track of the number of characters entered
            uint8_t idx = 0;
            while (idx < 10) 
 556:	fa e0       	ldi	r31, 0x0A	; 10
 558:	ff 12       	cpse	r15, r31
 55a:	f1 cf       	rjmp	.-30     	; 0x53e <main+0x108>
                // Increment the index
                idx++;
            }

            // Null-terminate the input text
            input_text[idx] = '\0';
 55c:	6f 2c       	mov	r6, r15
 55e:	71 2c       	mov	r7, r1
 560:	f8 01       	movw	r30, r16
 562:	e6 0d       	add	r30, r6
 564:	f7 1d       	adc	r31, r7
 566:	10 82       	st	Z, r1
 568:	46 01       	movw	r8, r12

            // Encrypt the text
            for (uint8_t i = 0; i < idx; i++) 
 56a:	58 01       	movw	r10, r16
 56c:	8a 2d       	mov	r24, r10
 56e:	80 1b       	sub	r24, r16
 570:	8f 15       	cp	r24, r15
 572:	e8 f0       	brcs	.+58     	; 0x5ae <main+0x178>
                // Use the caesar_cipher function to encrypt each character
                encrypted_text[i] = caesar_cipher(input_text[i], secret_key);
            }

            // Again, null-terminate the encrypted text
            encrypted_text[idx] = '\0';
 574:	f6 01       	movw	r30, r12
 576:	e6 0d       	add	r30, r6
 578:	f7 1d       	adc	r31, r7
 57a:	10 82       	st	Z, r1

            // Display encrypted text
            lcd_clrscr();
 57c:	0e 94 a6 01 	call	0x34c	; 0x34c <lcd_clrscr>
            lcd_gotoxy(0, 0);
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_gotoxy>
            lcd_puts("Encrypted:");
 588:	82 e6       	ldi	r24, 0x62	; 98
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_puts>
            lcd_gotoxy(0, 1);
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_gotoxy>
            lcd_puts(encrypted_text);
 598:	c6 01       	movw	r24, r12
 59a:	0e 94 c0 01 	call	0x380	; 0x380 <lcd_puts>
 59e:	ff ef       	ldi	r31, 0xFF	; 255
 5a0:	2b e7       	ldi	r18, 0x7B	; 123
 5a2:	32 e9       	ldi	r19, 0x92	; 146
 5a4:	f1 50       	subi	r31, 0x01	; 1
 5a6:	20 40       	sbci	r18, 0x00	; 0
 5a8:	30 40       	sbci	r19, 0x00	; 0
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <main+0x16e>
 5ac:	af cf       	rjmp	.-162    	; 0x50c <main+0xd6>

            // Encrypt the text
            for (uint8_t i = 0; i < idx; i++) 
            {   
                // Use the caesar_cipher function to encrypt each character
                encrypted_text[i] = caesar_cipher(input_text[i], secret_key);
 5ae:	6e 2d       	mov	r22, r14
 5b0:	f5 01       	movw	r30, r10
 5b2:	81 91       	ld	r24, Z+
 5b4:	5f 01       	movw	r10, r30
 5b6:	0e 94 5a 00 	call	0xb4	; 0xb4 <caesar_cipher>
 5ba:	f4 01       	movw	r30, r8
 5bc:	81 93       	st	Z+, r24
 5be:	4f 01       	movw	r8, r30
 5c0:	d5 cf       	rjmp	.-86     	; 0x56c <main+0x136>

000005c2 <__divmodhi4>:
 5c2:	97 fb       	bst	r25, 7
 5c4:	07 2e       	mov	r0, r23
 5c6:	16 f4       	brtc	.+4      	; 0x5cc <__divmodhi4+0xa>
 5c8:	00 94       	com	r0
 5ca:	07 d0       	rcall	.+14     	; 0x5da <__divmodhi4_neg1>
 5cc:	77 fd       	sbrc	r23, 7
 5ce:	09 d0       	rcall	.+18     	; 0x5e2 <__divmodhi4_neg2>
 5d0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__udivmodhi4>
 5d4:	07 fc       	sbrc	r0, 7
 5d6:	05 d0       	rcall	.+10     	; 0x5e2 <__divmodhi4_neg2>
 5d8:	3e f4       	brtc	.+14     	; 0x5e8 <__divmodhi4_exit>

000005da <__divmodhi4_neg1>:
 5da:	90 95       	com	r25
 5dc:	81 95       	neg	r24
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	08 95       	ret

000005e2 <__divmodhi4_neg2>:
 5e2:	70 95       	com	r23
 5e4:	61 95       	neg	r22
 5e6:	7f 4f       	sbci	r23, 0xFF	; 255

000005e8 <__divmodhi4_exit>:
 5e8:	08 95       	ret

000005ea <__udivmodhi4>:
 5ea:	aa 1b       	sub	r26, r26
 5ec:	bb 1b       	sub	r27, r27
 5ee:	51 e1       	ldi	r21, 0x11	; 17
 5f0:	07 c0       	rjmp	.+14     	; 0x600 <__udivmodhi4_ep>

000005f2 <__udivmodhi4_loop>:
 5f2:	aa 1f       	adc	r26, r26
 5f4:	bb 1f       	adc	r27, r27
 5f6:	a6 17       	cp	r26, r22
 5f8:	b7 07       	cpc	r27, r23
 5fa:	10 f0       	brcs	.+4      	; 0x600 <__udivmodhi4_ep>
 5fc:	a6 1b       	sub	r26, r22
 5fe:	b7 0b       	sbc	r27, r23

00000600 <__udivmodhi4_ep>:
 600:	88 1f       	adc	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	5a 95       	dec	r21
 606:	a9 f7       	brne	.-22     	; 0x5f2 <__udivmodhi4_loop>
 608:	80 95       	com	r24
 60a:	90 95       	com	r25
 60c:	bc 01       	movw	r22, r24
 60e:	cd 01       	movw	r24, r26
 610:	08 95       	ret

00000612 <_exit>:
 612:	f8 94       	cli

00000614 <__stop_program>:
 614:	ff cf       	rjmp	.-2      	; 0x614 <__stop_program>
